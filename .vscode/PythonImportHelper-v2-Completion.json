[
    {
        "label": "typing",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "typing",
        "description": "typing",
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Final",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Final",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Final",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Final",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Final",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Final",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Awaitable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Awaitable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Awaitable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Awaitable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Final",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Final",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Final",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Final",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "asgiref.sync",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asgiref.sync",
        "description": "asgiref.sync",
        "detail": "asgiref.sync",
        "documentation": {}
    },
    {
        "label": "sync_to_async",
        "importPath": "asgiref.sync",
        "description": "asgiref.sync",
        "isExtraImport": true,
        "detail": "asgiref.sync",
        "documentation": {}
    },
    {
        "label": "sync_to_async",
        "importPath": "asgiref.sync",
        "description": "asgiref.sync",
        "isExtraImport": true,
        "detail": "asgiref.sync",
        "documentation": {}
    },
    {
        "label": "sync_to_async",
        "importPath": "asgiref.sync",
        "description": "asgiref.sync",
        "isExtraImport": true,
        "detail": "asgiref.sync",
        "documentation": {}
    },
    {
        "label": "sync_to_async",
        "importPath": "asgiref.sync",
        "description": "asgiref.sync",
        "isExtraImport": true,
        "detail": "asgiref.sync",
        "documentation": {}
    },
    {
        "label": "sync_to_async",
        "importPath": "asgiref.sync",
        "description": "asgiref.sync",
        "isExtraImport": true,
        "detail": "asgiref.sync",
        "documentation": {}
    },
    {
        "label": "sync_to_async",
        "importPath": "asgiref.sync",
        "description": "asgiref.sync",
        "isExtraImport": true,
        "detail": "asgiref.sync",
        "documentation": {}
    },
    {
        "label": "sync_to_async",
        "importPath": "asgiref.sync",
        "description": "asgiref.sync",
        "isExtraImport": true,
        "detail": "asgiref.sync",
        "documentation": {}
    },
    {
        "label": "sync_to_async",
        "importPath": "asgiref.sync",
        "description": "asgiref.sync",
        "isExtraImport": true,
        "detail": "asgiref.sync",
        "documentation": {}
    },
    {
        "label": "sync_to_async",
        "importPath": "asgiref.sync",
        "description": "asgiref.sync",
        "isExtraImport": true,
        "detail": "asgiref.sync",
        "documentation": {}
    },
    {
        "label": "sync_to_async",
        "importPath": "asgiref.sync",
        "description": "asgiref.sync",
        "isExtraImport": true,
        "detail": "asgiref.sync",
        "documentation": {}
    },
    {
        "label": "sync_to_async",
        "importPath": "asgiref.sync",
        "description": "asgiref.sync",
        "isExtraImport": true,
        "detail": "asgiref.sync",
        "documentation": {}
    },
    {
        "label": "async_to_sync",
        "importPath": "asgiref.sync",
        "description": "asgiref.sync",
        "isExtraImport": true,
        "detail": "asgiref.sync",
        "documentation": {}
    },
    {
        "label": "sync_to_async",
        "importPath": "asgiref.sync",
        "description": "asgiref.sync",
        "isExtraImport": true,
        "detail": "asgiref.sync",
        "documentation": {}
    },
    {
        "label": "sync_to_async",
        "importPath": "asgiref.sync",
        "description": "asgiref.sync",
        "isExtraImport": true,
        "detail": "asgiref.sync",
        "documentation": {}
    },
    {
        "label": "sync_to_async",
        "importPath": "asgiref.sync",
        "description": "asgiref.sync",
        "isExtraImport": true,
        "detail": "asgiref.sync",
        "documentation": {}
    },
    {
        "label": "sync_to_async",
        "importPath": "asgiref.sync",
        "description": "asgiref.sync",
        "isExtraImport": true,
        "detail": "asgiref.sync",
        "documentation": {}
    },
    {
        "label": "async_to_sync",
        "importPath": "asgiref.sync",
        "description": "asgiref.sync",
        "isExtraImport": true,
        "detail": "asgiref.sync",
        "documentation": {}
    },
    {
        "label": "sync_to_async",
        "importPath": "asgiref.sync",
        "description": "asgiref.sync",
        "isExtraImport": true,
        "detail": "asgiref.sync",
        "documentation": {}
    },
    {
        "label": "async_to_sync",
        "importPath": "asgiref.sync",
        "description": "asgiref.sync",
        "isExtraImport": true,
        "detail": "asgiref.sync",
        "documentation": {}
    },
    {
        "label": "async_to_sync",
        "importPath": "asgiref.sync",
        "description": "asgiref.sync",
        "isExtraImport": true,
        "detail": "asgiref.sync",
        "documentation": {}
    },
    {
        "label": "sync_to_async",
        "importPath": "asgiref.sync",
        "description": "asgiref.sync",
        "isExtraImport": true,
        "detail": "asgiref.sync",
        "documentation": {}
    },
    {
        "label": "sync_to_async",
        "importPath": "asgiref.sync",
        "description": "asgiref.sync",
        "isExtraImport": true,
        "detail": "asgiref.sync",
        "documentation": {}
    },
    {
        "label": "async_to_sync",
        "importPath": "asgiref.sync",
        "description": "asgiref.sync",
        "isExtraImport": true,
        "detail": "asgiref.sync",
        "documentation": {}
    },
    {
        "label": "async_to_sync",
        "importPath": "asgiref.sync",
        "description": "asgiref.sync",
        "isExtraImport": true,
        "detail": "asgiref.sync",
        "documentation": {}
    },
    {
        "label": "sync_to_async",
        "importPath": "asgiref.sync",
        "description": "asgiref.sync",
        "isExtraImport": true,
        "detail": "asgiref.sync",
        "documentation": {}
    },
    {
        "label": "aiogram.types",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "BotCommand",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "BotCommand",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "BotCommand",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "BotCommand",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "BotCommand",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "ReplyKeyboardMarkup",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "KeyboardButton",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "InlineKeyboardMarkup",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "InlineKeyboardButton",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "ReplyKeyboardMarkup",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "KeyboardButton",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "InlineKeyboardMarkup",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "InlineKeyboardButton",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "Update",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "Update",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "user",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "Update",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "user",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "Update",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "user",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "BotCommand",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "aiogram.types",
        "description": "aiogram.types",
        "isExtraImport": true,
        "detail": "aiogram.types",
        "documentation": {}
    },
    {
        "label": "FSMContext",
        "importPath": "aiogram.fsm.context",
        "description": "aiogram.fsm.context",
        "isExtraImport": true,
        "detail": "aiogram.fsm.context",
        "documentation": {}
    },
    {
        "label": "FSMContext",
        "importPath": "aiogram.fsm.context",
        "description": "aiogram.fsm.context",
        "isExtraImport": true,
        "detail": "aiogram.fsm.context",
        "documentation": {}
    },
    {
        "label": "FSMContext",
        "importPath": "aiogram.fsm.context",
        "description": "aiogram.fsm.context",
        "isExtraImport": true,
        "detail": "aiogram.fsm.context",
        "documentation": {}
    },
    {
        "label": "FSMContext",
        "importPath": "aiogram.fsm.context",
        "description": "aiogram.fsm.context",
        "isExtraImport": true,
        "detail": "aiogram.fsm.context",
        "documentation": {}
    },
    {
        "label": "FSMContext",
        "importPath": "aiogram.fsm.context",
        "description": "aiogram.fsm.context",
        "isExtraImport": true,
        "detail": "aiogram.fsm.context",
        "documentation": {}
    },
    {
        "label": "FSMContext",
        "importPath": "aiogram.fsm.context",
        "description": "aiogram.fsm.context",
        "isExtraImport": true,
        "detail": "aiogram.fsm.context",
        "documentation": {}
    },
    {
        "label": "FSMContext",
        "importPath": "aiogram.fsm.context",
        "description": "aiogram.fsm.context",
        "isExtraImport": true,
        "detail": "aiogram.fsm.context",
        "documentation": {}
    },
    {
        "label": "FSMContext",
        "importPath": "aiogram.fsm.context",
        "description": "aiogram.fsm.context",
        "isExtraImport": true,
        "detail": "aiogram.fsm.context",
        "documentation": {}
    },
    {
        "label": "FSMContext",
        "importPath": "aiogram.fsm.context",
        "description": "aiogram.fsm.context",
        "isExtraImport": true,
        "detail": "aiogram.fsm.context",
        "documentation": {}
    },
    {
        "label": "FSMContext",
        "importPath": "aiogram.fsm.context",
        "description": "aiogram.fsm.context",
        "isExtraImport": true,
        "detail": "aiogram.fsm.context",
        "documentation": {}
    },
    {
        "label": "FSMContext",
        "importPath": "aiogram.fsm.context",
        "description": "aiogram.fsm.context",
        "isExtraImport": true,
        "detail": "aiogram.fsm.context",
        "documentation": {}
    },
    {
        "label": "FSMContext",
        "importPath": "aiogram.fsm.context",
        "description": "aiogram.fsm.context",
        "isExtraImport": true,
        "detail": "aiogram.fsm.context",
        "documentation": {}
    },
    {
        "label": "FSMContext",
        "importPath": "aiogram.fsm.context",
        "description": "aiogram.fsm.context",
        "isExtraImport": true,
        "detail": "aiogram.fsm.context",
        "documentation": {}
    },
    {
        "label": "Responder",
        "importPath": "app.apps.core.bot.services.responder",
        "description": "app.apps.core.bot.services.responder",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.services.responder",
        "documentation": {}
    },
    {
        "label": "Responder",
        "importPath": "app.apps.core.bot.services.responder",
        "description": "app.apps.core.bot.services.responder",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.services.responder",
        "documentation": {}
    },
    {
        "label": "Responder",
        "importPath": "app.apps.core.bot.services.responder",
        "description": "app.apps.core.bot.services.responder",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.services.responder",
        "documentation": {}
    },
    {
        "label": "Responder",
        "importPath": "app.apps.core.bot.services.responder",
        "description": "app.apps.core.bot.services.responder",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.services.responder",
        "documentation": {}
    },
    {
        "label": "Responder",
        "importPath": "app.apps.core.bot.services.responder",
        "description": "app.apps.core.bot.services.responder",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.services.responder",
        "documentation": {}
    },
    {
        "label": "Responder",
        "importPath": "app.apps.core.bot.services.responder",
        "description": "app.apps.core.bot.services.responder",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.services.responder",
        "documentation": {}
    },
    {
        "label": "CanResponse",
        "importPath": "app.apps.core.bot.services.can_response",
        "description": "app.apps.core.bot.services.can_response",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.services.can_response",
        "documentation": {}
    },
    {
        "label": "CanResponse",
        "importPath": "app.apps.core.bot.services.can_response",
        "description": "app.apps.core.bot.services.can_response",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.services.can_response",
        "documentation": {}
    },
    {
        "label": "HasIogramEntites",
        "importPath": "app.apps.core.bot.services.has_iogram_entities",
        "description": "app.apps.core.bot.services.has_iogram_entities",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.services.has_iogram_entities",
        "documentation": {}
    },
    {
        "label": "HasIogramEntites",
        "importPath": "app.apps.core.bot.services.has_iogram_entities",
        "description": "app.apps.core.bot.services.has_iogram_entities",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.services.has_iogram_entities",
        "documentation": {}
    },
    {
        "label": "HasIogramEntites",
        "importPath": "app.apps.core.bot.services.has_iogram_entities",
        "description": "app.apps.core.bot.services.has_iogram_entities",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.services.has_iogram_entities",
        "documentation": {}
    },
    {
        "label": "app.apps.core.models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "app.apps.core.models",
        "description": "app.apps.core.models",
        "detail": "app.apps.core.models",
        "documentation": {}
    },
    {
        "label": "TariffPlan",
        "importPath": "app.apps.core.models",
        "description": "app.apps.core.models",
        "isExtraImport": true,
        "detail": "app.apps.core.models",
        "documentation": {}
    },
    {
        "label": "TelegramUser",
        "importPath": "app.apps.core.models",
        "description": "app.apps.core.models",
        "isExtraImport": true,
        "detail": "app.apps.core.models",
        "documentation": {}
    },
    {
        "label": "TariffPlan",
        "importPath": "app.apps.core.models",
        "description": "app.apps.core.models",
        "isExtraImport": true,
        "detail": "app.apps.core.models",
        "documentation": {}
    },
    {
        "label": "TelegramUser",
        "importPath": "app.apps.core.models",
        "description": "app.apps.core.models",
        "isExtraImport": true,
        "detail": "app.apps.core.models",
        "documentation": {}
    },
    {
        "label": "TariffPlan",
        "importPath": "app.apps.core.models",
        "description": "app.apps.core.models",
        "isExtraImport": true,
        "detail": "app.apps.core.models",
        "documentation": {}
    },
    {
        "label": "TelegramUser",
        "importPath": "app.apps.core.models",
        "description": "app.apps.core.models",
        "isExtraImport": true,
        "detail": "app.apps.core.models",
        "documentation": {}
    },
    {
        "label": "TelegramUser",
        "importPath": "app.apps.core.models",
        "description": "app.apps.core.models",
        "isExtraImport": true,
        "detail": "app.apps.core.models",
        "documentation": {}
    },
    {
        "label": "TelegramUser",
        "importPath": "app.apps.core.models",
        "description": "app.apps.core.models",
        "isExtraImport": true,
        "detail": "app.apps.core.models",
        "documentation": {}
    },
    {
        "label": "Search",
        "importPath": "app.apps.core.models",
        "description": "app.apps.core.models",
        "isExtraImport": true,
        "detail": "app.apps.core.models",
        "documentation": {}
    },
    {
        "label": "TelegramUser",
        "importPath": "app.apps.core.models",
        "description": "app.apps.core.models",
        "isExtraImport": true,
        "detail": "app.apps.core.models",
        "documentation": {}
    },
    {
        "label": "Search",
        "importPath": "app.apps.core.models",
        "description": "app.apps.core.models",
        "isExtraImport": true,
        "detail": "app.apps.core.models",
        "documentation": {}
    },
    {
        "label": "TelegramUser",
        "importPath": "app.apps.core.models",
        "description": "app.apps.core.models",
        "isExtraImport": true,
        "detail": "app.apps.core.models",
        "documentation": {}
    },
    {
        "label": "TariffPlan",
        "importPath": "app.apps.core.models",
        "description": "app.apps.core.models",
        "isExtraImport": true,
        "detail": "app.apps.core.models",
        "documentation": {}
    },
    {
        "label": "TelegramUser",
        "importPath": "app.apps.core.models",
        "description": "app.apps.core.models",
        "isExtraImport": true,
        "detail": "app.apps.core.models",
        "documentation": {}
    },
    {
        "label": "TelegramUser",
        "importPath": "app.apps.core.models",
        "description": "app.apps.core.models",
        "isExtraImport": true,
        "detail": "app.apps.core.models",
        "documentation": {}
    },
    {
        "label": "TariffPlan",
        "importPath": "app.apps.core.models",
        "description": "app.apps.core.models",
        "isExtraImport": true,
        "detail": "app.apps.core.models",
        "documentation": {}
    },
    {
        "label": "TelegramUser",
        "importPath": "app.apps.core.models",
        "description": "app.apps.core.models",
        "isExtraImport": true,
        "detail": "app.apps.core.models",
        "documentation": {}
    },
    {
        "label": "Search",
        "importPath": "app.apps.core.models",
        "description": "app.apps.core.models",
        "isExtraImport": true,
        "detail": "app.apps.core.models",
        "documentation": {}
    },
    {
        "label": "Debtor",
        "importPath": "app.apps.core.models",
        "description": "app.apps.core.models",
        "isExtraImport": true,
        "detail": "app.apps.core.models",
        "documentation": {}
    },
    {
        "label": "Search",
        "importPath": "app.apps.core.models",
        "description": "app.apps.core.models",
        "isExtraImport": true,
        "detail": "app.apps.core.models",
        "documentation": {}
    },
    {
        "label": "TelegramUser",
        "importPath": "app.apps.core.models",
        "description": "app.apps.core.models",
        "isExtraImport": true,
        "detail": "app.apps.core.models",
        "documentation": {}
    },
    {
        "label": "SearchTelegramUser",
        "importPath": "app.apps.core.models",
        "description": "app.apps.core.models",
        "isExtraImport": true,
        "detail": "app.apps.core.models",
        "documentation": {}
    },
    {
        "label": "TariffPlan",
        "importPath": "app.apps.core.models",
        "description": "app.apps.core.models",
        "isExtraImport": true,
        "detail": "app.apps.core.models",
        "documentation": {}
    },
    {
        "label": "TelegramUser",
        "importPath": "app.apps.core.models",
        "description": "app.apps.core.models",
        "isExtraImport": true,
        "detail": "app.apps.core.models",
        "documentation": {}
    },
    {
        "label": "TariffPlan",
        "importPath": "app.apps.core.models",
        "description": "app.apps.core.models",
        "isExtraImport": true,
        "detail": "app.apps.core.models",
        "documentation": {}
    },
    {
        "label": "TelegramUser",
        "importPath": "app.apps.core.models",
        "description": "app.apps.core.models",
        "isExtraImport": true,
        "detail": "app.apps.core.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "app.apps.core.models",
        "description": "app.apps.core.models",
        "isExtraImport": true,
        "detail": "app.apps.core.models",
        "documentation": {}
    },
    {
        "label": "Search",
        "importPath": "app.apps.core.models",
        "description": "app.apps.core.models",
        "isExtraImport": true,
        "detail": "app.apps.core.models",
        "documentation": {}
    },
    {
        "label": "TariffPlan",
        "importPath": "app.apps.core.models",
        "description": "app.apps.core.models",
        "isExtraImport": true,
        "detail": "app.apps.core.models",
        "documentation": {}
    },
    {
        "label": "TelegramUser",
        "importPath": "app.apps.core.models",
        "description": "app.apps.core.models",
        "isExtraImport": true,
        "detail": "app.apps.core.models",
        "documentation": {}
    },
    {
        "label": "Search",
        "importPath": "app.apps.core.models",
        "description": "app.apps.core.models",
        "isExtraImport": true,
        "detail": "app.apps.core.models",
        "documentation": {}
    },
    {
        "label": "Search",
        "importPath": "app.apps.core.models",
        "description": "app.apps.core.models",
        "isExtraImport": true,
        "detail": "app.apps.core.models",
        "documentation": {}
    },
    {
        "label": "Search",
        "importPath": "app.apps.core.models",
        "description": "app.apps.core.models",
        "isExtraImport": true,
        "detail": "app.apps.core.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "app.apps.core.models",
        "description": "app.apps.core.models",
        "isExtraImport": true,
        "detail": "app.apps.core.models",
        "documentation": {}
    },
    {
        "label": "Search",
        "importPath": "app.apps.core.models",
        "description": "app.apps.core.models",
        "isExtraImport": true,
        "detail": "app.apps.core.models",
        "documentation": {}
    },
    {
        "label": "Case",
        "importPath": "app.apps.core.bot.cases.__case",
        "description": "app.apps.core.bot.cases.__case",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.cases.__case",
        "documentation": {}
    },
    {
        "label": "Case",
        "importPath": "app.apps.core.bot.cases.__case",
        "description": "app.apps.core.bot.cases.__case",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.cases.__case",
        "documentation": {}
    },
    {
        "label": "Case",
        "importPath": "app.apps.core.bot.cases.__case",
        "description": "app.apps.core.bot.cases.__case",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.cases.__case",
        "documentation": {}
    },
    {
        "label": "Case",
        "importPath": "app.apps.core.bot.cases.__case",
        "description": "app.apps.core.bot.cases.__case",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.cases.__case",
        "documentation": {}
    },
    {
        "label": "Case",
        "importPath": "app.apps.core.bot.cases.__case",
        "description": "app.apps.core.bot.cases.__case",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.cases.__case",
        "documentation": {}
    },
    {
        "label": "Case",
        "importPath": "app.apps.core.bot.cases.__case",
        "description": "app.apps.core.bot.cases.__case",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.cases.__case",
        "documentation": {}
    },
    {
        "label": "UserRepository",
        "importPath": "app.apps.core.repositories.user_repository",
        "description": "app.apps.core.repositories.user_repository",
        "isExtraImport": true,
        "detail": "app.apps.core.repositories.user_repository",
        "documentation": {}
    },
    {
        "label": "UserRepository",
        "importPath": "app.apps.core.repositories.user_repository",
        "description": "app.apps.core.repositories.user_repository",
        "isExtraImport": true,
        "detail": "app.apps.core.repositories.user_repository",
        "documentation": {}
    },
    {
        "label": "UserRepository",
        "importPath": "app.apps.core.repositories.user_repository",
        "description": "app.apps.core.repositories.user_repository",
        "isExtraImport": true,
        "detail": "app.apps.core.repositories.user_repository",
        "documentation": {}
    },
    {
        "label": "UserRepository",
        "importPath": "app.apps.core.repositories.user_repository",
        "description": "app.apps.core.repositories.user_repository",
        "isExtraImport": true,
        "detail": "app.apps.core.repositories.user_repository",
        "documentation": {}
    },
    {
        "label": "UserRepository",
        "importPath": "app.apps.core.repositories.user_repository",
        "description": "app.apps.core.repositories.user_repository",
        "isExtraImport": true,
        "detail": "app.apps.core.repositories.user_repository",
        "documentation": {}
    },
    {
        "label": "UserRepository",
        "importPath": "app.apps.core.repositories.user_repository",
        "description": "app.apps.core.repositories.user_repository",
        "isExtraImport": true,
        "detail": "app.apps.core.repositories.user_repository",
        "documentation": {}
    },
    {
        "label": "UserRepository",
        "importPath": "app.apps.core.repositories.user_repository",
        "description": "app.apps.core.repositories.user_repository",
        "isExtraImport": true,
        "detail": "app.apps.core.repositories.user_repository",
        "documentation": {}
    },
    {
        "label": "UserRepository",
        "importPath": "app.apps.core.repositories.user_repository",
        "description": "app.apps.core.repositories.user_repository",
        "isExtraImport": true,
        "detail": "app.apps.core.repositories.user_repository",
        "documentation": {}
    },
    {
        "label": "UserRepository",
        "importPath": "app.apps.core.repositories.user_repository",
        "description": "app.apps.core.repositories.user_repository",
        "isExtraImport": true,
        "detail": "app.apps.core.repositories.user_repository",
        "documentation": {}
    },
    {
        "label": "UserRepository",
        "importPath": "app.apps.core.repositories.user_repository",
        "description": "app.apps.core.repositories.user_repository",
        "isExtraImport": true,
        "detail": "app.apps.core.repositories.user_repository",
        "documentation": {}
    },
    {
        "label": "UserRepository",
        "importPath": "app.apps.core.repositories.user_repository",
        "description": "app.apps.core.repositories.user_repository",
        "isExtraImport": true,
        "detail": "app.apps.core.repositories.user_repository",
        "documentation": {}
    },
    {
        "label": "SearchRepository",
        "importPath": "app.apps.core.repositories.search_repository",
        "description": "app.apps.core.repositories.search_repository",
        "isExtraImport": true,
        "detail": "app.apps.core.repositories.search_repository",
        "documentation": {}
    },
    {
        "label": "SearchRepository",
        "importPath": "app.apps.core.repositories.search_repository",
        "description": "app.apps.core.repositories.search_repository",
        "isExtraImport": true,
        "detail": "app.apps.core.repositories.search_repository",
        "documentation": {}
    },
    {
        "label": "SearchRepository",
        "importPath": "app.apps.core.repositories.search_repository",
        "description": "app.apps.core.repositories.search_repository",
        "isExtraImport": true,
        "detail": "app.apps.core.repositories.search_repository",
        "documentation": {}
    },
    {
        "label": "SearchRepository",
        "importPath": "app.apps.core.repositories.search_repository",
        "description": "app.apps.core.repositories.search_repository",
        "isExtraImport": true,
        "detail": "app.apps.core.repositories.search_repository",
        "documentation": {}
    },
    {
        "label": "SearchRepository",
        "importPath": "app.apps.core.repositories.search_repository",
        "description": "app.apps.core.repositories.search_repository",
        "isExtraImport": true,
        "detail": "app.apps.core.repositories.search_repository",
        "documentation": {}
    },
    {
        "label": "SearchRepository",
        "importPath": "app.apps.core.repositories.search_repository",
        "description": "app.apps.core.repositories.search_repository",
        "isExtraImport": true,
        "detail": "app.apps.core.repositories.search_repository",
        "documentation": {}
    },
    {
        "label": "SearchRepository",
        "importPath": "app.apps.core.repositories.search_repository",
        "description": "app.apps.core.repositories.search_repository",
        "isExtraImport": true,
        "detail": "app.apps.core.repositories.search_repository",
        "documentation": {}
    },
    {
        "label": "GetUsername",
        "importPath": "app.apps.core.bot.states",
        "description": "app.apps.core.bot.states",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.states",
        "documentation": {}
    },
    {
        "label": "GetUsername",
        "importPath": "app.apps.core.bot.states",
        "description": "app.apps.core.bot.states",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.states",
        "documentation": {}
    },
    {
        "label": "GetUsername",
        "importPath": "app.apps.core.bot.states",
        "description": "app.apps.core.bot.states",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.states",
        "documentation": {}
    },
    {
        "label": "GetUsername",
        "importPath": "app.apps.core.bot.states",
        "description": "app.apps.core.bot.states",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.states",
        "documentation": {}
    },
    {
        "label": "WorkState",
        "importPath": "app.apps.core.bot.states",
        "description": "app.apps.core.bot.states",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.states",
        "documentation": {}
    },
    {
        "label": "GetUsername",
        "importPath": "app.apps.core.bot.states",
        "description": "app.apps.core.bot.states",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.states",
        "documentation": {}
    },
    {
        "label": "WorkState",
        "importPath": "app.apps.core.bot.states",
        "description": "app.apps.core.bot.states",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.states",
        "documentation": {}
    },
    {
        "label": "GetUsername",
        "importPath": "app.apps.core.bot.states",
        "description": "app.apps.core.bot.states",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.states",
        "documentation": {}
    },
    {
        "label": "WorkState",
        "importPath": "app.apps.core.bot.states",
        "description": "app.apps.core.bot.states",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.states",
        "documentation": {}
    },
    {
        "label": "WorkState",
        "importPath": "app.apps.core.bot.states",
        "description": "app.apps.core.bot.states",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.states",
        "documentation": {}
    },
    {
        "label": "GetUsername",
        "importPath": "app.apps.core.bot.states",
        "description": "app.apps.core.bot.states",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.states",
        "documentation": {}
    },
    {
        "label": "WorkState",
        "importPath": "app.apps.core.bot.states",
        "description": "app.apps.core.bot.states",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.states",
        "documentation": {}
    },
    {
        "label": "t",
        "importPath": "app.services.translater",
        "description": "app.services.translater",
        "isExtraImport": true,
        "detail": "app.services.translater",
        "documentation": {}
    },
    {
        "label": "t",
        "importPath": "app.services.translater",
        "description": "app.services.translater",
        "isExtraImport": true,
        "detail": "app.services.translater",
        "documentation": {}
    },
    {
        "label": "t",
        "importPath": "app.services.translater",
        "description": "app.services.translater",
        "isExtraImport": true,
        "detail": "app.services.translater",
        "documentation": {}
    },
    {
        "label": "t",
        "importPath": "app.services.translater",
        "description": "app.services.translater",
        "isExtraImport": true,
        "detail": "app.services.translater",
        "documentation": {}
    },
    {
        "label": "t",
        "importPath": "app.services.translater",
        "description": "app.services.translater",
        "isExtraImport": true,
        "detail": "app.services.translater",
        "documentation": {}
    },
    {
        "label": "t",
        "importPath": "app.services.translater",
        "description": "app.services.translater",
        "isExtraImport": true,
        "detail": "app.services.translater",
        "documentation": {}
    },
    {
        "label": "t",
        "importPath": "app.services.translater",
        "description": "app.services.translater",
        "isExtraImport": true,
        "detail": "app.services.translater",
        "documentation": {}
    },
    {
        "label": "t",
        "importPath": "app.services.translater",
        "description": "app.services.translater",
        "isExtraImport": true,
        "detail": "app.services.translater",
        "documentation": {}
    },
    {
        "label": "t",
        "importPath": "app.services.translater",
        "description": "app.services.translater",
        "isExtraImport": true,
        "detail": "app.services.translater",
        "documentation": {}
    },
    {
        "label": "t",
        "importPath": "app.services.translater",
        "description": "app.services.translater",
        "isExtraImport": true,
        "detail": "app.services.translater",
        "documentation": {}
    },
    {
        "label": "t",
        "importPath": "app.services.translater",
        "description": "app.services.translater",
        "isExtraImport": true,
        "detail": "app.services.translater",
        "documentation": {}
    },
    {
        "label": "t",
        "importPath": "app.services.translater",
        "description": "app.services.translater",
        "isExtraImport": true,
        "detail": "app.services.translater",
        "documentation": {}
    },
    {
        "label": "t",
        "importPath": "app.services.translater",
        "description": "app.services.translater",
        "isExtraImport": true,
        "detail": "app.services.translater",
        "documentation": {}
    },
    {
        "label": "t",
        "importPath": "app.services.translater",
        "description": "app.services.translater",
        "isExtraImport": true,
        "detail": "app.services.translater",
        "documentation": {}
    },
    {
        "label": "t",
        "importPath": "app.services.translater",
        "description": "app.services.translater",
        "isExtraImport": true,
        "detail": "app.services.translater",
        "documentation": {}
    },
    {
        "label": "t",
        "importPath": "app.services.translater",
        "description": "app.services.translater",
        "isExtraImport": true,
        "detail": "app.services.translater",
        "documentation": {}
    },
    {
        "label": "t",
        "importPath": "app.services.translater",
        "description": "app.services.translater",
        "isExtraImport": true,
        "detail": "app.services.translater",
        "documentation": {}
    },
    {
        "label": "t",
        "importPath": "app.services.translater",
        "description": "app.services.translater",
        "isExtraImport": true,
        "detail": "app.services.translater",
        "documentation": {}
    },
    {
        "label": "t",
        "importPath": "app.services.translater",
        "description": "app.services.translater",
        "isExtraImport": true,
        "detail": "app.services.translater",
        "documentation": {}
    },
    {
        "label": "Translator",
        "importPath": "app.services.translater",
        "description": "app.services.translater",
        "isExtraImport": true,
        "detail": "app.services.translater",
        "documentation": {}
    },
    {
        "label": "Translator",
        "importPath": "app.services.translater",
        "description": "app.services.translater",
        "isExtraImport": true,
        "detail": "app.services.translater",
        "documentation": {}
    },
    {
        "label": "t",
        "importPath": "app.services.translater",
        "description": "app.services.translater",
        "isExtraImport": true,
        "detail": "app.services.translater",
        "documentation": {}
    },
    {
        "label": "t",
        "importPath": "app.services.translater",
        "description": "app.services.translater",
        "isExtraImport": true,
        "detail": "app.services.translater",
        "documentation": {}
    },
    {
        "label": "t",
        "importPath": "app.services.translater",
        "description": "app.services.translater",
        "isExtraImport": true,
        "detail": "app.services.translater",
        "documentation": {}
    },
    {
        "label": "UserCallbackData",
        "importPath": "app.apps.core.bot.filters",
        "description": "app.apps.core.bot.filters",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.filters",
        "documentation": {}
    },
    {
        "label": "SearchCallbackData",
        "importPath": "app.apps.core.bot.filters",
        "description": "app.apps.core.bot.filters",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.filters",
        "documentation": {}
    },
    {
        "label": "UserCallbackData",
        "importPath": "app.apps.core.bot.filters",
        "description": "app.apps.core.bot.filters",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.filters",
        "documentation": {}
    },
    {
        "label": "UserCallbackData",
        "importPath": "app.apps.core.bot.filters",
        "description": "app.apps.core.bot.filters",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.filters",
        "documentation": {}
    },
    {
        "label": "UserCallbackData",
        "importPath": "app.apps.core.bot.filters",
        "description": "app.apps.core.bot.filters",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.filters",
        "documentation": {}
    },
    {
        "label": "UserCallbackData",
        "importPath": "app.apps.core.bot.filters",
        "description": "app.apps.core.bot.filters",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.filters",
        "documentation": {}
    },
    {
        "label": "UserCallbackData",
        "importPath": "app.apps.core.bot.filters",
        "description": "app.apps.core.bot.filters",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.filters",
        "documentation": {}
    },
    {
        "label": "UserCallbackData",
        "importPath": "app.apps.core.bot.filters",
        "description": "app.apps.core.bot.filters",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.filters",
        "documentation": {}
    },
    {
        "label": "UserCallbackData",
        "importPath": "app.apps.core.bot.filters",
        "description": "app.apps.core.bot.filters",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.filters",
        "documentation": {}
    },
    {
        "label": "SearchCallbackData",
        "importPath": "app.apps.core.bot.filters",
        "description": "app.apps.core.bot.filters",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.filters",
        "documentation": {}
    },
    {
        "label": "UserCallbackData",
        "importPath": "app.apps.core.bot.filters",
        "description": "app.apps.core.bot.filters",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.filters",
        "documentation": {}
    },
    {
        "label": "UserCallbackData",
        "importPath": "app.apps.core.bot.filters",
        "description": "app.apps.core.bot.filters",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.filters",
        "documentation": {}
    },
    {
        "label": "SearchCallbackData",
        "importPath": "app.apps.core.bot.filters",
        "description": "app.apps.core.bot.filters",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.filters",
        "documentation": {}
    },
    {
        "label": "UserCallbackData",
        "importPath": "app.apps.core.bot.filters",
        "description": "app.apps.core.bot.filters",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.filters",
        "documentation": {}
    },
    {
        "label": "SearchCallbackData",
        "importPath": "app.apps.core.bot.filters",
        "description": "app.apps.core.bot.filters",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.filters",
        "documentation": {}
    },
    {
        "label": "UserCallbackData",
        "importPath": "app.apps.core.bot.filters",
        "description": "app.apps.core.bot.filters",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.filters",
        "documentation": {}
    },
    {
        "label": "SearchCallbackData",
        "importPath": "app.apps.core.bot.filters",
        "description": "app.apps.core.bot.filters",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.filters",
        "documentation": {}
    },
    {
        "label": "UserCallbackData",
        "importPath": "app.apps.core.bot.filters",
        "description": "app.apps.core.bot.filters",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.filters",
        "documentation": {}
    },
    {
        "label": "SearchCallbackData",
        "importPath": "app.apps.core.bot.filters",
        "description": "app.apps.core.bot.filters",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.filters",
        "documentation": {}
    },
    {
        "label": "UserCallbackData",
        "importPath": "app.apps.core.bot.filters",
        "description": "app.apps.core.bot.filters",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.filters",
        "documentation": {}
    },
    {
        "label": "SearchCallbackData",
        "importPath": "app.apps.core.bot.filters",
        "description": "app.apps.core.bot.filters",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.filters",
        "documentation": {}
    },
    {
        "label": "UserCallbackData",
        "importPath": "app.apps.core.bot.filters",
        "description": "app.apps.core.bot.filters",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.filters",
        "documentation": {}
    },
    {
        "label": "UserCallbackData",
        "importPath": "app.apps.core.bot.filters",
        "description": "app.apps.core.bot.filters",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.filters",
        "documentation": {}
    },
    {
        "label": "Redis",
        "importPath": "app.services.redis",
        "description": "app.services.redis",
        "isExtraImport": true,
        "detail": "app.services.redis",
        "documentation": {}
    },
    {
        "label": "Redis",
        "importPath": "app.services.redis",
        "description": "app.services.redis",
        "isExtraImport": true,
        "detail": "app.services.redis",
        "documentation": {}
    },
    {
        "label": "Redis",
        "importPath": "app.services.redis",
        "description": "app.services.redis",
        "isExtraImport": true,
        "detail": "app.services.redis",
        "documentation": {}
    },
    {
        "label": "Redis",
        "importPath": "app.services.redis",
        "description": "app.services.redis",
        "isExtraImport": true,
        "detail": "app.services.redis",
        "documentation": {}
    },
    {
        "label": "Redis",
        "importPath": "app.services.redis",
        "description": "app.services.redis",
        "isExtraImport": true,
        "detail": "app.services.redis",
        "documentation": {}
    },
    {
        "label": "Redis",
        "importPath": "app.services.redis",
        "description": "app.services.redis",
        "isExtraImport": true,
        "detail": "app.services.redis",
        "documentation": {}
    },
    {
        "label": "Redis",
        "importPath": "app.services.redis",
        "description": "app.services.redis",
        "isExtraImport": true,
        "detail": "app.services.redis",
        "documentation": {}
    },
    {
        "label": "as_section",
        "importPath": "aiogram.utils.formatting",
        "description": "aiogram.utils.formatting",
        "isExtraImport": true,
        "detail": "aiogram.utils.formatting",
        "documentation": {}
    },
    {
        "label": "as_key_value",
        "importPath": "aiogram.utils.formatting",
        "description": "aiogram.utils.formatting",
        "isExtraImport": true,
        "detail": "aiogram.utils.formatting",
        "documentation": {}
    },
    {
        "label": "as_marked_section",
        "importPath": "aiogram.utils.formatting",
        "description": "aiogram.utils.formatting",
        "isExtraImport": true,
        "detail": "aiogram.utils.formatting",
        "documentation": {}
    },
    {
        "label": "Bold",
        "importPath": "aiogram.utils.formatting",
        "description": "aiogram.utils.formatting",
        "isExtraImport": true,
        "detail": "aiogram.utils.formatting",
        "documentation": {}
    },
    {
        "label": "as_section",
        "importPath": "aiogram.utils.formatting",
        "description": "aiogram.utils.formatting",
        "isExtraImport": true,
        "detail": "aiogram.utils.formatting",
        "documentation": {}
    },
    {
        "label": "as_key_value",
        "importPath": "aiogram.utils.formatting",
        "description": "aiogram.utils.formatting",
        "isExtraImport": true,
        "detail": "aiogram.utils.formatting",
        "documentation": {}
    },
    {
        "label": "as_marked_section",
        "importPath": "aiogram.utils.formatting",
        "description": "aiogram.utils.formatting",
        "isExtraImport": true,
        "detail": "aiogram.utils.formatting",
        "documentation": {}
    },
    {
        "label": "Bold",
        "importPath": "aiogram.utils.formatting",
        "description": "aiogram.utils.formatting",
        "isExtraImport": true,
        "detail": "aiogram.utils.formatting",
        "documentation": {}
    },
    {
        "label": "as_section",
        "importPath": "aiogram.utils.formatting",
        "description": "aiogram.utils.formatting",
        "isExtraImport": true,
        "detail": "aiogram.utils.formatting",
        "documentation": {}
    },
    {
        "label": "as_key_value",
        "importPath": "aiogram.utils.formatting",
        "description": "aiogram.utils.formatting",
        "isExtraImport": true,
        "detail": "aiogram.utils.formatting",
        "documentation": {}
    },
    {
        "label": "as_marked_section",
        "importPath": "aiogram.utils.formatting",
        "description": "aiogram.utils.formatting",
        "isExtraImport": true,
        "detail": "aiogram.utils.formatting",
        "documentation": {}
    },
    {
        "label": "Bold",
        "importPath": "aiogram.utils.formatting",
        "description": "aiogram.utils.formatting",
        "isExtraImport": true,
        "detail": "aiogram.utils.formatting",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "aiogram.utils.formatting",
        "description": "aiogram.utils.formatting",
        "isExtraImport": true,
        "detail": "aiogram.utils.formatting",
        "documentation": {}
    },
    {
        "label": "Bold",
        "importPath": "aiogram.utils.formatting",
        "description": "aiogram.utils.formatting",
        "isExtraImport": true,
        "detail": "aiogram.utils.formatting",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "aiogram.utils.formatting",
        "description": "aiogram.utils.formatting",
        "isExtraImport": true,
        "detail": "aiogram.utils.formatting",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "aiogram.utils.formatting",
        "description": "aiogram.utils.formatting",
        "isExtraImport": true,
        "detail": "aiogram.utils.formatting",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "aiogram.utils.formatting",
        "description": "aiogram.utils.formatting",
        "isExtraImport": true,
        "detail": "aiogram.utils.formatting",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "aiogram.utils.formatting",
        "description": "aiogram.utils.formatting",
        "isExtraImport": true,
        "detail": "aiogram.utils.formatting",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "aiogram.utils.formatting",
        "description": "aiogram.utils.formatting",
        "isExtraImport": true,
        "detail": "aiogram.utils.formatting",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "aiogram.utils.formatting",
        "description": "aiogram.utils.formatting",
        "isExtraImport": true,
        "detail": "aiogram.utils.formatting",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "aiogram.utils.formatting",
        "description": "aiogram.utils.formatting",
        "isExtraImport": true,
        "detail": "aiogram.utils.formatting",
        "documentation": {}
    },
    {
        "label": "app.apps.core.bot.helpers",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "app.apps.core.bot.helpers",
        "description": "app.apps.core.bot.helpers",
        "detail": "app.apps.core.bot.helpers",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "app.apps.core.bot.helpers",
        "description": "app.apps.core.bot.helpers",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.helpers",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "app.apps.core.bot.helpers",
        "description": "app.apps.core.bot.helpers",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.helpers",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "app.apps.core.bot.helpers",
        "description": "app.apps.core.bot.helpers",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.helpers",
        "documentation": {}
    },
    {
        "label": "answer",
        "importPath": "app.apps.core.bot.helpers",
        "description": "app.apps.core.bot.helpers",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.helpers",
        "documentation": {}
    },
    {
        "label": "get_chats_sending_id",
        "importPath": "app.apps.core.bot.helpers",
        "description": "app.apps.core.bot.helpers",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.helpers",
        "documentation": {}
    },
    {
        "label": "messager",
        "importPath": "app.apps.core.bot.helpers",
        "description": "app.apps.core.bot.helpers",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.helpers",
        "documentation": {}
    },
    {
        "label": "messager",
        "importPath": "app.apps.core.bot.helpers",
        "description": "app.apps.core.bot.helpers",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.helpers",
        "documentation": {}
    },
    {
        "label": "get_debtor_info",
        "importPath": "app.apps.core.bot.helpers",
        "description": "app.apps.core.bot.helpers",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.helpers",
        "documentation": {}
    },
    {
        "label": "messager",
        "importPath": "app.apps.core.bot.helpers",
        "description": "app.apps.core.bot.helpers",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.helpers",
        "documentation": {}
    },
    {
        "label": "messager",
        "importPath": "app.apps.core.bot.helpers",
        "description": "app.apps.core.bot.helpers",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.helpers",
        "documentation": {}
    },
    {
        "label": "answer",
        "importPath": "app.apps.core.bot.helpers",
        "description": "app.apps.core.bot.helpers",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.helpers",
        "documentation": {}
    },
    {
        "label": "messager",
        "importPath": "app.apps.core.bot.helpers",
        "description": "app.apps.core.bot.helpers",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.helpers",
        "documentation": {}
    },
    {
        "label": "messager",
        "importPath": "app.apps.core.bot.helpers",
        "description": "app.apps.core.bot.helpers",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.helpers",
        "documentation": {}
    },
    {
        "label": "change_tariff",
        "importPath": "app.apps.core.bot.keyboards.search",
        "description": "app.apps.core.bot.keyboards.search",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.keyboards.search",
        "documentation": {}
    },
    {
        "label": "change_tariff",
        "importPath": "app.apps.core.bot.keyboards.search",
        "description": "app.apps.core.bot.keyboards.search",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.keyboards.search",
        "documentation": {}
    },
    {
        "label": "search_status",
        "importPath": "app.apps.core.bot.keyboards.search",
        "description": "app.apps.core.bot.keyboards.search",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.keyboards.search",
        "documentation": {}
    },
    {
        "label": "change_tariff",
        "importPath": "app.apps.core.bot.keyboards.search",
        "description": "app.apps.core.bot.keyboards.search",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.keyboards.search",
        "documentation": {}
    },
    {
        "label": "change_tariff",
        "importPath": "app.apps.core.bot.keyboards.search",
        "description": "app.apps.core.bot.keyboards.search",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.keyboards.search",
        "documentation": {}
    },
    {
        "label": "force_reply",
        "importPath": "app.apps.core.bot.keyboards.search",
        "description": "app.apps.core.bot.keyboards.search",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.keyboards.search",
        "documentation": {}
    },
    {
        "label": "set_chats",
        "importPath": "app.apps.core.bot.keyboards.search",
        "description": "app.apps.core.bot.keyboards.search",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.keyboards.search",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "app.apps.core.bot.keyboards.search",
        "description": "app.apps.core.bot.keyboards.search",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.keyboards.search",
        "documentation": {}
    },
    {
        "label": "force_reply",
        "importPath": "app.apps.core.bot.keyboards.search",
        "description": "app.apps.core.bot.keyboards.search",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.keyboards.search",
        "documentation": {}
    },
    {
        "label": "clear_chats",
        "importPath": "app.apps.core.bot.keyboards.search",
        "description": "app.apps.core.bot.keyboards.search",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.keyboards.search",
        "documentation": {}
    },
    {
        "label": "next_step",
        "importPath": "app.apps.core.bot.keyboards.search",
        "description": "app.apps.core.bot.keyboards.search",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.keyboards.search",
        "documentation": {}
    },
    {
        "label": "set_chats",
        "importPath": "app.apps.core.bot.keyboards.search",
        "description": "app.apps.core.bot.keyboards.search",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.keyboards.search",
        "documentation": {}
    },
    {
        "label": "set_chats_keyboard",
        "importPath": "app.apps.core.bot.keyboards.search",
        "description": "app.apps.core.bot.keyboards.search",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.keyboards.search",
        "documentation": {}
    },
    {
        "label": "set_keywords",
        "importPath": "app.apps.core.bot.keyboards.search",
        "description": "app.apps.core.bot.keyboards.search",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.keyboards.search",
        "documentation": {}
    },
    {
        "label": "buy_tariff_inline",
        "importPath": "app.apps.core.bot.keyboards.search",
        "description": "app.apps.core.bot.keyboards.search",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.keyboards.search",
        "documentation": {}
    },
    {
        "label": "clear_chats",
        "importPath": "app.apps.core.bot.keyboards.search",
        "description": "app.apps.core.bot.keyboards.search",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.keyboards.search",
        "documentation": {}
    },
    {
        "label": "next_step",
        "importPath": "app.apps.core.bot.keyboards.search",
        "description": "app.apps.core.bot.keyboards.search",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.keyboards.search",
        "documentation": {}
    },
    {
        "label": "search_status",
        "importPath": "app.apps.core.bot.keyboards.search",
        "description": "app.apps.core.bot.keyboards.search",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.keyboards.search",
        "documentation": {}
    },
    {
        "label": "search_status_or_delete",
        "importPath": "app.apps.core.bot.keyboards.search",
        "description": "app.apps.core.bot.keyboards.search",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.keyboards.search",
        "documentation": {}
    },
    {
        "label": "set_chats",
        "importPath": "app.apps.core.bot.keyboards.search",
        "description": "app.apps.core.bot.keyboards.search",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.keyboards.search",
        "documentation": {}
    },
    {
        "label": "force_reply",
        "importPath": "app.apps.core.bot.keyboards.search",
        "description": "app.apps.core.bot.keyboards.search",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.keyboards.search",
        "documentation": {}
    },
    {
        "label": "set_chats",
        "importPath": "app.apps.core.bot.keyboards.search",
        "description": "app.apps.core.bot.keyboards.search",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.keyboards.search",
        "documentation": {}
    },
    {
        "label": "set_keywords",
        "importPath": "app.apps.core.bot.keyboards.search",
        "description": "app.apps.core.bot.keyboards.search",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.keyboards.search",
        "documentation": {}
    },
    {
        "label": "force_reply",
        "importPath": "app.apps.core.bot.keyboards.search",
        "description": "app.apps.core.bot.keyboards.search",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.keyboards.search",
        "documentation": {}
    },
    {
        "label": "set_chats_keyboard",
        "importPath": "app.apps.core.bot.keyboards.search",
        "description": "app.apps.core.bot.keyboards.search",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.keyboards.search",
        "documentation": {}
    },
    {
        "label": "app.apps.core.DTO",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "app.apps.core.DTO",
        "description": "app.apps.core.DTO",
        "detail": "app.apps.core.DTO",
        "documentation": {}
    },
    {
        "label": "KeywordsDto",
        "importPath": "app.apps.core.DTO",
        "description": "app.apps.core.DTO",
        "isExtraImport": true,
        "detail": "app.apps.core.DTO",
        "documentation": {}
    },
    {
        "label": "SearchDto",
        "importPath": "app.apps.core.DTO",
        "description": "app.apps.core.DTO",
        "isExtraImport": true,
        "detail": "app.apps.core.DTO",
        "documentation": {}
    },
    {
        "label": "KeywordsDto",
        "importPath": "app.apps.core.DTO",
        "description": "app.apps.core.DTO",
        "isExtraImport": true,
        "detail": "app.apps.core.DTO",
        "documentation": {}
    },
    {
        "label": "SearchDto",
        "importPath": "app.apps.core.DTO",
        "description": "app.apps.core.DTO",
        "isExtraImport": true,
        "detail": "app.apps.core.DTO",
        "documentation": {}
    },
    {
        "label": "TariffDto",
        "importPath": "app.apps.core.DTO",
        "description": "app.apps.core.DTO",
        "isExtraImport": true,
        "detail": "app.apps.core.DTO",
        "documentation": {}
    },
    {
        "label": "DebtorSearchState",
        "importPath": "app.apps.core.DTO",
        "description": "app.apps.core.DTO",
        "isExtraImport": true,
        "detail": "app.apps.core.DTO",
        "documentation": {}
    },
    {
        "label": "KeywordsDto",
        "importPath": "app.apps.core.DTO",
        "description": "app.apps.core.DTO",
        "isExtraImport": true,
        "detail": "app.apps.core.DTO",
        "documentation": {}
    },
    {
        "label": "SearchDto",
        "importPath": "app.apps.core.DTO",
        "description": "app.apps.core.DTO",
        "isExtraImport": true,
        "detail": "app.apps.core.DTO",
        "documentation": {}
    },
    {
        "label": "TariffDto",
        "importPath": "app.apps.core.DTO",
        "description": "app.apps.core.DTO",
        "isExtraImport": true,
        "detail": "app.apps.core.DTO",
        "documentation": {}
    },
    {
        "label": "KeywordsDto",
        "importPath": "app.apps.core.DTO",
        "description": "app.apps.core.DTO",
        "isExtraImport": true,
        "detail": "app.apps.core.DTO",
        "documentation": {}
    },
    {
        "label": "KeywordsDto",
        "importPath": "app.apps.core.DTO",
        "description": "app.apps.core.DTO",
        "isExtraImport": true,
        "detail": "app.apps.core.DTO",
        "documentation": {}
    },
    {
        "label": "KeywordsDto",
        "importPath": "app.apps.core.DTO",
        "description": "app.apps.core.DTO",
        "isExtraImport": true,
        "detail": "app.apps.core.DTO",
        "documentation": {}
    },
    {
        "label": "KeywordsDto",
        "importPath": "app.apps.core.DTO",
        "description": "app.apps.core.DTO",
        "isExtraImport": true,
        "detail": "app.apps.core.DTO",
        "documentation": {}
    },
    {
        "label": "DebtorSearchState",
        "importPath": "app.apps.core.DTO",
        "description": "app.apps.core.DTO",
        "isExtraImport": true,
        "detail": "app.apps.core.DTO",
        "documentation": {}
    },
    {
        "label": "DebtorState",
        "importPath": "app.apps.core.DTO",
        "description": "app.apps.core.DTO",
        "isExtraImport": true,
        "detail": "app.apps.core.DTO",
        "documentation": {}
    },
    {
        "label": "SearchDto",
        "importPath": "app.apps.core.DTO",
        "description": "app.apps.core.DTO",
        "isExtraImport": true,
        "detail": "app.apps.core.DTO",
        "documentation": {}
    },
    {
        "label": "TariffDto",
        "importPath": "app.apps.core.DTO",
        "description": "app.apps.core.DTO",
        "isExtraImport": true,
        "detail": "app.apps.core.DTO",
        "documentation": {}
    },
    {
        "label": "KeywordsDto",
        "importPath": "app.apps.core.DTO",
        "description": "app.apps.core.DTO",
        "isExtraImport": true,
        "detail": "app.apps.core.DTO",
        "documentation": {}
    },
    {
        "label": "TariffDto",
        "importPath": "app.apps.core.DTO",
        "description": "app.apps.core.DTO",
        "isExtraImport": true,
        "detail": "app.apps.core.DTO",
        "documentation": {}
    },
    {
        "label": "KeywordsDto",
        "importPath": "app.apps.core.DTO",
        "description": "app.apps.core.DTO",
        "isExtraImport": true,
        "detail": "app.apps.core.DTO",
        "documentation": {}
    },
    {
        "label": "KeywordsDto",
        "importPath": "app.apps.core.DTO",
        "description": "app.apps.core.DTO",
        "isExtraImport": true,
        "detail": "app.apps.core.DTO",
        "documentation": {}
    },
    {
        "label": "SearchDto",
        "importPath": "app.apps.core.DTO",
        "description": "app.apps.core.DTO",
        "isExtraImport": true,
        "detail": "app.apps.core.DTO",
        "documentation": {}
    },
    {
        "label": "SearchTelegramAccount",
        "importPath": "app.apps.core.DTO",
        "description": "app.apps.core.DTO",
        "isExtraImport": true,
        "detail": "app.apps.core.DTO",
        "documentation": {}
    },
    {
        "label": "TariffDto",
        "importPath": "app.apps.core.DTO",
        "description": "app.apps.core.DTO",
        "isExtraImport": true,
        "detail": "app.apps.core.DTO",
        "documentation": {}
    },
    {
        "label": "SearchTelegramAccount",
        "importPath": "app.apps.core.DTO",
        "description": "app.apps.core.DTO",
        "isExtraImport": true,
        "detail": "app.apps.core.DTO",
        "documentation": {}
    },
    {
        "label": "TariffDto",
        "importPath": "app.apps.core.DTO",
        "description": "app.apps.core.DTO",
        "isExtraImport": true,
        "detail": "app.apps.core.DTO",
        "documentation": {}
    },
    {
        "label": "TelegramInfoDto",
        "importPath": "app.apps.core.DTO",
        "description": "app.apps.core.DTO",
        "isExtraImport": true,
        "detail": "app.apps.core.DTO",
        "documentation": {}
    },
    {
        "label": "ChatsWithOrdersDto",
        "importPath": "app.apps.core.DTO",
        "description": "app.apps.core.DTO",
        "isExtraImport": true,
        "detail": "app.apps.core.DTO",
        "documentation": {}
    },
    {
        "label": "SearchDto",
        "importPath": "app.apps.core.DTO",
        "description": "app.apps.core.DTO",
        "isExtraImport": true,
        "detail": "app.apps.core.DTO",
        "documentation": {}
    },
    {
        "label": "SearchDto",
        "importPath": "app.apps.core.DTO",
        "description": "app.apps.core.DTO",
        "isExtraImport": true,
        "detail": "app.apps.core.DTO",
        "documentation": {}
    },
    {
        "label": "ChatsWithOrdersDto",
        "importPath": "app.apps.core.DTO",
        "description": "app.apps.core.DTO",
        "isExtraImport": true,
        "detail": "app.apps.core.DTO",
        "documentation": {}
    },
    {
        "label": "SearchOrderDTO",
        "importPath": "app.apps.core.DTO",
        "description": "app.apps.core.DTO",
        "isExtraImport": true,
        "detail": "app.apps.core.DTO",
        "documentation": {}
    },
    {
        "label": "SearchTelegramAccount",
        "importPath": "app.apps.core.DTO",
        "description": "app.apps.core.DTO",
        "isExtraImport": true,
        "detail": "app.apps.core.DTO",
        "documentation": {}
    },
    {
        "label": "SearchTelegramAccount",
        "importPath": "app.apps.core.DTO",
        "description": "app.apps.core.DTO",
        "isExtraImport": true,
        "detail": "app.apps.core.DTO",
        "documentation": {}
    },
    {
        "label": "SearchTelegramAccount",
        "importPath": "app.apps.core.DTO",
        "description": "app.apps.core.DTO",
        "isExtraImport": true,
        "detail": "app.apps.core.DTO",
        "documentation": {}
    },
    {
        "label": "app.apps.core.bot.enum",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "app.apps.core.bot.enum",
        "description": "app.apps.core.bot.enum",
        "detail": "app.apps.core.bot.enum",
        "documentation": {}
    },
    {
        "label": "SearchStatus",
        "importPath": "app.apps.core.bot.enum",
        "description": "app.apps.core.bot.enum",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.enum",
        "documentation": {}
    },
    {
        "label": "SearchType",
        "importPath": "app.apps.core.bot.enum",
        "description": "app.apps.core.bot.enum",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.enum",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "importPath": "app.apps.core.bot.enum",
        "description": "app.apps.core.bot.enum",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.enum",
        "documentation": {}
    },
    {
        "label": "ReviewStatus",
        "importPath": "app.apps.core.bot.enum",
        "description": "app.apps.core.bot.enum",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.enum",
        "documentation": {}
    },
    {
        "label": "SearchStatus",
        "importPath": "app.apps.core.bot.enum",
        "description": "app.apps.core.bot.enum",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.enum",
        "documentation": {}
    },
    {
        "label": "SearchType",
        "importPath": "app.apps.core.bot.enum",
        "description": "app.apps.core.bot.enum",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.enum",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "importPath": "app.apps.core.bot.enum",
        "description": "app.apps.core.bot.enum",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.enum",
        "documentation": {}
    },
    {
        "label": "ReviewStatus",
        "importPath": "app.apps.core.bot.enum",
        "description": "app.apps.core.bot.enum",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.enum",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "importPath": "app.apps.core.bot.enum",
        "description": "app.apps.core.bot.enum",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.enum",
        "documentation": {}
    },
    {
        "label": "ReviewStatus",
        "importPath": "app.apps.core.bot.enum",
        "description": "app.apps.core.bot.enum",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.enum",
        "documentation": {}
    },
    {
        "label": "SearchStatus",
        "importPath": "app.apps.core.bot.enum",
        "description": "app.apps.core.bot.enum",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.enum",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "importPath": "app.apps.core.bot.enum",
        "description": "app.apps.core.bot.enum",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.enum",
        "documentation": {}
    },
    {
        "label": "SearchType",
        "importPath": "app.apps.core.bot.enum",
        "description": "app.apps.core.bot.enum",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.enum",
        "documentation": {}
    },
    {
        "label": "ReviewStatus",
        "importPath": "app.apps.core.bot.enum",
        "description": "app.apps.core.bot.enum",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.enum",
        "documentation": {}
    },
    {
        "label": "SearchStatus",
        "importPath": "app.apps.core.bot.enum",
        "description": "app.apps.core.bot.enum",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.enum",
        "documentation": {}
    },
    {
        "label": "SearchType",
        "importPath": "app.apps.core.bot.enum",
        "description": "app.apps.core.bot.enum",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.enum",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "importPath": "app.apps.core.bot.enum",
        "description": "app.apps.core.bot.enum",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.enum",
        "documentation": {}
    },
    {
        "label": "Messager",
        "importPath": "app.apps.core.bot.services.messager",
        "description": "app.apps.core.bot.services.messager",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.services.messager",
        "documentation": {}
    },
    {
        "label": "Messager",
        "importPath": "app.apps.core.bot.services.messager",
        "description": "app.apps.core.bot.services.messager",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.services.messager",
        "documentation": {}
    },
    {
        "label": "Messager",
        "importPath": "app.apps.core.bot.services.messager",
        "description": "app.apps.core.bot.services.messager",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.services.messager",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "TariffCase",
        "importPath": "app.apps.core.bot.cases.tariff_case",
        "description": "app.apps.core.bot.cases.tariff_case",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.cases.tariff_case",
        "documentation": {}
    },
    {
        "label": "allow_writer",
        "importPath": "app.apps.core.bot.keyboards.main",
        "description": "app.apps.core.bot.keyboards.main",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.keyboards.main",
        "documentation": {}
    },
    {
        "label": "reply_keyboard",
        "importPath": "app.apps.core.bot.keyboards.main",
        "description": "app.apps.core.bot.keyboards.main",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.keyboards.main",
        "documentation": {}
    },
    {
        "label": "start_keyboard",
        "importPath": "app.apps.core.bot.keyboards.main",
        "description": "app.apps.core.bot.keyboards.main",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.keyboards.main",
        "documentation": {}
    },
    {
        "label": "moderate_review",
        "importPath": "app.apps.core.bot.keyboards.main",
        "description": "app.apps.core.bot.keyboards.main",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.keyboards.main",
        "documentation": {}
    },
    {
        "label": "moderate_review",
        "importPath": "app.apps.core.bot.keyboards.main",
        "description": "app.apps.core.bot.keyboards.main",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.keyboards.main",
        "documentation": {}
    },
    {
        "label": "aiogram.enums",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "aiogram.enums",
        "description": "aiogram.enums",
        "detail": "aiogram.enums",
        "documentation": {}
    },
    {
        "label": "ParseMode",
        "importPath": "aiogram.enums",
        "description": "aiogram.enums",
        "isExtraImport": true,
        "detail": "aiogram.enums",
        "documentation": {}
    },
    {
        "label": "ParseMode",
        "importPath": "aiogram.enums",
        "description": "aiogram.enums",
        "isExtraImport": true,
        "detail": "aiogram.enums",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "aiogram.enums",
        "description": "aiogram.enums",
        "isExtraImport": true,
        "detail": "aiogram.enums",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "aiogram.enums",
        "description": "aiogram.enums",
        "isExtraImport": true,
        "detail": "aiogram.enums",
        "documentation": {}
    },
    {
        "label": "ParseMode",
        "importPath": "aiogram.enums",
        "description": "aiogram.enums",
        "isExtraImport": true,
        "detail": "aiogram.enums",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "aiogram.enums",
        "description": "aiogram.enums",
        "isExtraImport": true,
        "detail": "aiogram.enums",
        "documentation": {}
    },
    {
        "label": "TariffRepository",
        "importPath": "app.apps.core.repositories.tariff_repository",
        "description": "app.apps.core.repositories.tariff_repository",
        "isExtraImport": true,
        "detail": "app.apps.core.repositories.tariff_repository",
        "documentation": {}
    },
    {
        "label": "TariffRepository",
        "importPath": "app.apps.core.repositories.tariff_repository",
        "description": "app.apps.core.repositories.tariff_repository",
        "isExtraImport": true,
        "detail": "app.apps.core.repositories.tariff_repository",
        "documentation": {}
    },
    {
        "label": "aiogram",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "aiogram",
        "description": "aiogram",
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "Router",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "F",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "Bot",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "Router",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "types",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "F",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "Router",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "F",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "Bot",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "Router",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "types",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "F",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "Bot",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "Router",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "types",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "F",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "Router",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "F",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "Bot",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "Router",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "types",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "F",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "Bot",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "Router",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "types",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "F",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "Router",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "F",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "Bot",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "Router",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "types",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "F",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "Router",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "F",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "Bot",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "Router",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "types",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "F",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "BaseMiddleware",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "BaseMiddleware",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "BaseMiddleware",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "BaseMiddleware",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "Router",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "types",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "F",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "F",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "Bot",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "types",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "F",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "Bot",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "Bot",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "Router",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "types",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "F",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "Bot",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "Bot",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "types",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "F",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "Bot",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "Bot",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "types",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "F",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "Command",
        "importPath": "aiogram.filters",
        "description": "aiogram.filters",
        "isExtraImport": true,
        "detail": "aiogram.filters",
        "documentation": {}
    },
    {
        "label": "Command",
        "importPath": "aiogram.filters",
        "description": "aiogram.filters",
        "isExtraImport": true,
        "detail": "aiogram.filters",
        "documentation": {}
    },
    {
        "label": "Command",
        "importPath": "aiogram.filters",
        "description": "aiogram.filters",
        "isExtraImport": true,
        "detail": "aiogram.filters",
        "documentation": {}
    },
    {
        "label": "Command",
        "importPath": "aiogram.filters",
        "description": "aiogram.filters",
        "isExtraImport": true,
        "detail": "aiogram.filters",
        "documentation": {}
    },
    {
        "label": "Command",
        "importPath": "aiogram.filters",
        "description": "aiogram.filters",
        "isExtraImport": true,
        "detail": "aiogram.filters",
        "documentation": {}
    },
    {
        "label": "Command",
        "importPath": "aiogram.filters",
        "description": "aiogram.filters",
        "isExtraImport": true,
        "detail": "aiogram.filters",
        "documentation": {}
    },
    {
        "label": "Filter",
        "importPath": "aiogram.filters",
        "description": "aiogram.filters",
        "isExtraImport": true,
        "detail": "aiogram.filters",
        "documentation": {}
    },
    {
        "label": "TelegramUserCase",
        "importPath": "app.apps.core.bot.cases.telegram_user_case",
        "description": "app.apps.core.bot.cases.telegram_user_case",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.cases.telegram_user_case",
        "documentation": {}
    },
    {
        "label": "TelegramUserCase",
        "importPath": "app.apps.core.bot.cases.telegram_user_case",
        "description": "app.apps.core.bot.cases.telegram_user_case",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.cases.telegram_user_case",
        "documentation": {}
    },
    {
        "label": "TelegramUserCase",
        "importPath": "app.apps.core.bot.cases.telegram_user_case",
        "description": "app.apps.core.bot.cases.telegram_user_case",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.cases.telegram_user_case",
        "documentation": {}
    },
    {
        "label": "TelegramUserCase",
        "importPath": "app.apps.core.bot.cases.telegram_user_case",
        "description": "app.apps.core.bot.cases.telegram_user_case",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.cases.telegram_user_case",
        "documentation": {}
    },
    {
        "label": "TelegramUserCase",
        "importPath": "app.apps.core.bot.cases.telegram_user_case",
        "description": "app.apps.core.bot.cases.telegram_user_case",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.cases.telegram_user_case",
        "documentation": {}
    },
    {
        "label": "TelegramUserCase",
        "importPath": "app.apps.core.bot.cases.telegram_user_case",
        "description": "app.apps.core.bot.cases.telegram_user_case",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.cases.telegram_user_case",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "importPath": "app.config.application",
        "description": "app.config.application",
        "isExtraImport": true,
        "detail": "app.config.application",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "importPath": "app.config.application",
        "description": "app.config.application",
        "isExtraImport": true,
        "detail": "app.config.application",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "importPath": "app.config.application",
        "description": "app.config.application",
        "isExtraImport": true,
        "detail": "app.config.application",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "importPath": "app.config.application",
        "description": "app.config.application",
        "isExtraImport": true,
        "detail": "app.config.application",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "importPath": "app.config.application",
        "description": "app.config.application",
        "isExtraImport": true,
        "detail": "app.config.application",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "importPath": "app.config.application",
        "description": "app.config.application",
        "isExtraImport": true,
        "detail": "app.config.application",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "importPath": "app.config.application",
        "description": "app.config.application",
        "isExtraImport": true,
        "detail": "app.config.application",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "importPath": "app.config.application",
        "description": "app.config.application",
        "isExtraImport": true,
        "detail": "app.config.application",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "importPath": "app.config.application",
        "description": "app.config.application",
        "isExtraImport": true,
        "detail": "app.config.application",
        "documentation": {}
    },
    {
        "label": "aiogram.fsm.state",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "aiogram.fsm.state",
        "description": "aiogram.fsm.state",
        "detail": "aiogram.fsm.state",
        "documentation": {}
    },
    {
        "label": "State",
        "importPath": "aiogram.fsm.state",
        "description": "aiogram.fsm.state",
        "isExtraImport": true,
        "detail": "aiogram.fsm.state",
        "documentation": {}
    },
    {
        "label": "StatesGroup",
        "importPath": "aiogram.fsm.state",
        "description": "aiogram.fsm.state",
        "isExtraImport": true,
        "detail": "aiogram.fsm.state",
        "documentation": {}
    },
    {
        "label": "State",
        "importPath": "aiogram.fsm.state",
        "description": "aiogram.fsm.state",
        "isExtraImport": true,
        "detail": "aiogram.fsm.state",
        "documentation": {}
    },
    {
        "label": "StatesGroup",
        "importPath": "aiogram.fsm.state",
        "description": "aiogram.fsm.state",
        "isExtraImport": true,
        "detail": "aiogram.fsm.state",
        "documentation": {}
    },
    {
        "label": "State",
        "importPath": "aiogram.fsm.state",
        "description": "aiogram.fsm.state",
        "isExtraImport": true,
        "detail": "aiogram.fsm.state",
        "documentation": {}
    },
    {
        "label": "StatesGroup",
        "importPath": "aiogram.fsm.state",
        "description": "aiogram.fsm.state",
        "isExtraImport": true,
        "detail": "aiogram.fsm.state",
        "documentation": {}
    },
    {
        "label": "State",
        "importPath": "aiogram.fsm.state",
        "description": "aiogram.fsm.state",
        "isExtraImport": true,
        "detail": "aiogram.fsm.state",
        "documentation": {}
    },
    {
        "label": "StatesGroup",
        "importPath": "aiogram.fsm.state",
        "description": "aiogram.fsm.state",
        "isExtraImport": true,
        "detail": "aiogram.fsm.state",
        "documentation": {}
    },
    {
        "label": "State",
        "importPath": "aiogram.fsm.state",
        "description": "aiogram.fsm.state",
        "isExtraImport": true,
        "detail": "aiogram.fsm.state",
        "documentation": {}
    },
    {
        "label": "StatesGroup",
        "importPath": "aiogram.fsm.state",
        "description": "aiogram.fsm.state",
        "isExtraImport": true,
        "detail": "aiogram.fsm.state",
        "documentation": {}
    },
    {
        "label": "State",
        "importPath": "aiogram.fsm.state",
        "description": "aiogram.fsm.state",
        "isExtraImport": true,
        "detail": "aiogram.fsm.state",
        "documentation": {}
    },
    {
        "label": "StatesGroup",
        "importPath": "aiogram.fsm.state",
        "description": "aiogram.fsm.state",
        "isExtraImport": true,
        "detail": "aiogram.fsm.state",
        "documentation": {}
    },
    {
        "label": "State",
        "importPath": "aiogram.fsm.state",
        "description": "aiogram.fsm.state",
        "isExtraImport": true,
        "detail": "aiogram.fsm.state",
        "documentation": {}
    },
    {
        "label": "StatesGroup",
        "importPath": "aiogram.fsm.state",
        "description": "aiogram.fsm.state",
        "isExtraImport": true,
        "detail": "aiogram.fsm.state",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "WorkCase",
        "importPath": "app.apps.core.bot.cases.work_case",
        "description": "app.apps.core.bot.cases.work_case",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.cases.work_case",
        "documentation": {}
    },
    {
        "label": "WorkCase",
        "importPath": "app.apps.core.bot.cases.work_case",
        "description": "app.apps.core.bot.cases.work_case",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.cases.work_case",
        "documentation": {}
    },
    {
        "label": "WorkCase",
        "importPath": "app.apps.core.bot.cases.work_case",
        "description": "app.apps.core.bot.cases.work_case",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.cases.work_case",
        "documentation": {}
    },
    {
        "label": "BaseController",
        "importPath": "app.apps.core.bot.controllers._base_controller",
        "description": "app.apps.core.bot.controllers._base_controller",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.controllers._base_controller",
        "documentation": {}
    },
    {
        "label": "BaseController",
        "importPath": "app.apps.core.bot.controllers._base_controller",
        "description": "app.apps.core.bot.controllers._base_controller",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.controllers._base_controller",
        "documentation": {}
    },
    {
        "label": "BaseController",
        "importPath": "app.apps.core.bot.controllers._base_controller",
        "description": "app.apps.core.bot.controllers._base_controller",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.controllers._base_controller",
        "documentation": {}
    },
    {
        "label": "BaseController",
        "importPath": "app.apps.core.bot.controllers._base_controller",
        "description": "app.apps.core.bot.controllers._base_controller",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.controllers._base_controller",
        "documentation": {}
    },
    {
        "label": "BaseController",
        "importPath": "app.apps.core.bot.controllers._base_controller",
        "description": "app.apps.core.bot.controllers._base_controller",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.controllers._base_controller",
        "documentation": {}
    },
    {
        "label": "BaseController",
        "importPath": "app.apps.core.bot.controllers._base_controller",
        "description": "app.apps.core.bot.controllers._base_controller",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.controllers._base_controller",
        "documentation": {}
    },
    {
        "label": "BaseController",
        "importPath": "app.apps.core.bot.controllers._base_controller",
        "description": "app.apps.core.bot.controllers._base_controller",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.controllers._base_controller",
        "documentation": {}
    },
    {
        "label": "make_inline_btn",
        "importPath": "app.apps.core.bot.keyboards.buttons",
        "description": "app.apps.core.bot.keyboards.buttons",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.keyboards.buttons",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "app.apps.core.bot.keyboards.buttons",
        "description": "app.apps.core.bot.keyboards.buttons",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.keyboards.buttons",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "app.apps.core.bot.keyboards.buttons",
        "description": "app.apps.core.bot.keyboards.buttons",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.keyboards.buttons",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "app.apps.core.bot.keyboards.buttons",
        "description": "app.apps.core.bot.keyboards.buttons",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.keyboards.buttons",
        "documentation": {}
    },
    {
        "label": "delete_msg",
        "importPath": "app.apps.core.bot.keyboards.buttons",
        "description": "app.apps.core.bot.keyboards.buttons",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.keyboards.buttons",
        "documentation": {}
    },
    {
        "label": "AdvancedModeCase",
        "importPath": "app.apps.core.bot.cases.advanced_mode",
        "description": "app.apps.core.bot.cases.advanced_mode",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.cases.advanced_mode",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "app.apps.core.bot.keyboards.advanced_mode",
        "description": "app.apps.core.bot.keyboards.advanced_mode",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.keyboards.advanced_mode",
        "documentation": {}
    },
    {
        "label": "DebtorRepository",
        "importPath": "app.apps.core.repositories.debtor_repository",
        "description": "app.apps.core.repositories.debtor_repository",
        "isExtraImport": true,
        "detail": "app.apps.core.repositories.debtor_repository",
        "documentation": {}
    },
    {
        "label": "DebtorRepository",
        "importPath": "app.apps.core.repositories.debtor_repository",
        "description": "app.apps.core.repositories.debtor_repository",
        "isExtraImport": true,
        "detail": "app.apps.core.repositories.debtor_repository",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "TelegramWalker",
        "importPath": "app.services.search_services.telegram_walker",
        "description": "app.services.search_services.telegram_walker",
        "isExtraImport": true,
        "detail": "app.services.search_services.telegram_walker",
        "documentation": {}
    },
    {
        "label": "TelegramWalker",
        "importPath": "app.services.search_services.telegram_walker",
        "description": "app.services.search_services.telegram_walker",
        "isExtraImport": true,
        "detail": "app.services.search_services.telegram_walker",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "SearchCase",
        "importPath": "app.apps.core.bot.cases.search",
        "description": "app.apps.core.bot.cases.search",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.cases.search",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "aiogram.utils.keyboard",
        "description": "aiogram.utils.keyboard",
        "isExtraImport": true,
        "detail": "aiogram.utils.keyboard",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "aiogram.utils.keyboard",
        "description": "aiogram.utils.keyboard",
        "isExtraImport": true,
        "detail": "aiogram.utils.keyboard",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "aiogram.utils.keyboard",
        "description": "aiogram.utils.keyboard",
        "isExtraImport": true,
        "detail": "aiogram.utils.keyboard",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "aiogram.utils.keyboard",
        "description": "aiogram.utils.keyboard",
        "isExtraImport": true,
        "detail": "aiogram.utils.keyboard",
        "documentation": {}
    },
    {
        "label": "aiogram.types.inline_keyboard_markup",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "aiogram.types.inline_keyboard_markup",
        "description": "aiogram.types.inline_keyboard_markup",
        "detail": "aiogram.types.inline_keyboard_markup",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Router",
        "importPath": "app.apps.core.bot.services.router",
        "description": "app.apps.core.bot.services.router",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.services.router",
        "documentation": {}
    },
    {
        "label": "StartController",
        "importPath": "app.apps.core.bot.controllers.start",
        "description": "app.apps.core.bot.controllers.start",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.controllers.start",
        "documentation": {}
    },
    {
        "label": "UserController",
        "importPath": "app.apps.core.bot.controllers.user",
        "description": "app.apps.core.bot.controllers.user",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.controllers.user",
        "documentation": {}
    },
    {
        "label": "JobController",
        "importPath": "app.apps.core.bot.controllers.job",
        "description": "app.apps.core.bot.controllers.job",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.controllers.job",
        "documentation": {}
    },
    {
        "label": "CheckController",
        "importPath": "app.apps.core.bot.controllers.check",
        "description": "app.apps.core.bot.controllers.check",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.controllers.check",
        "documentation": {}
    },
    {
        "label": "safe_parse_webapp_init_data",
        "importPath": "aiogram.utils.web_app",
        "description": "aiogram.utils.web_app",
        "isExtraImport": true,
        "detail": "aiogram.utils.web_app",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "aiohttp.web_request",
        "description": "aiohttp.web_request",
        "isExtraImport": true,
        "detail": "aiohttp.web_request",
        "documentation": {}
    },
    {
        "label": "json_response",
        "importPath": "aiohttp.web_response",
        "description": "aiohttp.web_response",
        "isExtraImport": true,
        "detail": "aiohttp.web_response",
        "documentation": {}
    },
    {
        "label": "aiogram.exceptions",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "aiogram.exceptions",
        "description": "aiogram.exceptions",
        "detail": "aiogram.exceptions",
        "documentation": {}
    },
    {
        "label": "TelegramBadRequest",
        "importPath": "aiogram.exceptions",
        "description": "aiogram.exceptions",
        "isExtraImport": true,
        "detail": "aiogram.exceptions",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "aiogram.exceptions",
        "description": "aiogram.exceptions",
        "isExtraImport": true,
        "detail": "aiogram.exceptions",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "aiogram.exceptions",
        "description": "aiogram.exceptions",
        "isExtraImport": true,
        "detail": "aiogram.exceptions",
        "documentation": {}
    },
    {
        "label": "CallbackType",
        "importPath": "aiogram.dispatcher.event.handler",
        "description": "aiogram.dispatcher.event.handler",
        "isExtraImport": true,
        "detail": "aiogram.dispatcher.event.handler",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "CallbackData",
        "importPath": "aiogram.filters.callback_data",
        "description": "aiogram.filters.callback_data",
        "isExtraImport": true,
        "detail": "aiogram.filters.callback_data",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "xml.etree.ElementTree",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "xml.etree.ElementTree",
        "description": "xml.etree.ElementTree",
        "detail": "xml.etree.ElementTree",
        "documentation": {}
    },
    {
        "label": "MainMiddleware",
        "importPath": "app.apps.core.bot.middlewares.main",
        "description": "app.apps.core.bot.middlewares.main",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.middlewares.main",
        "documentation": {}
    },
    {
        "label": "LanguageMiddleware",
        "importPath": "app.apps.core.bot.middlewares.language",
        "description": "app.apps.core.bot.middlewares.language",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.middlewares.language",
        "documentation": {}
    },
    {
        "label": "HasTariffMiddleware",
        "importPath": "app.apps.core.bot.middlewares.has_tariff",
        "description": "app.apps.core.bot.middlewares.has_tariff",
        "isExtraImport": true,
        "detail": "app.apps.core.bot.middlewares.has_tariff",
        "documentation": {}
    },
    {
        "label": "Faker",
        "importPath": "faker",
        "description": "faker",
        "isExtraImport": true,
        "detail": "faker",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "django.utils.timezone",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "BaseRepository",
        "importPath": "app.apps.core.repositories.base",
        "description": "app.apps.core.repositories.base",
        "isExtraImport": true,
        "detail": "app.apps.core.repositories.base",
        "documentation": {}
    },
    {
        "label": "BaseRepository",
        "importPath": "app.apps.core.repositories.base",
        "description": "app.apps.core.repositories.base",
        "isExtraImport": true,
        "detail": "app.apps.core.repositories.base",
        "documentation": {}
    },
    {
        "label": "BaseRepository",
        "importPath": "app.apps.core.repositories.base",
        "description": "app.apps.core.repositories.base",
        "isExtraImport": true,
        "detail": "app.apps.core.repositories.base",
        "documentation": {}
    },
    {
        "label": "BaseRepository",
        "importPath": "app.apps.core.repositories.base",
        "description": "app.apps.core.repositories.base",
        "isExtraImport": true,
        "detail": "app.apps.core.repositories.base",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "Model",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "HasAttributes",
        "importPath": "app.services.has_attributes",
        "description": "app.services.has_attributes",
        "isExtraImport": true,
        "detail": "app.services.has_attributes",
        "documentation": {}
    },
    {
        "label": "HasAttributes",
        "importPath": "app.services.has_attributes",
        "description": "app.services.has_attributes",
        "isExtraImport": true,
        "detail": "app.services.has_attributes",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "GenericForeignKey",
        "importPath": "django.contrib.contenttypes.fields",
        "description": "django.contrib.contenttypes.fields",
        "isExtraImport": true,
        "detail": "django.contrib.contenttypes.fields",
        "documentation": {}
    },
    {
        "label": "GenericRelation",
        "importPath": "django.contrib.contenttypes.fields",
        "description": "django.contrib.contenttypes.fields",
        "isExtraImport": true,
        "detail": "django.contrib.contenttypes.fields",
        "documentation": {}
    },
    {
        "label": "ContentType",
        "importPath": "django.contrib.contenttypes.models",
        "description": "django.contrib.contenttypes.models",
        "isExtraImport": true,
        "detail": "django.contrib.contenttypes.models",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "env",
        "importPath": "app.config",
        "description": "app.config",
        "isExtraImport": true,
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "env",
        "importPath": "app.config",
        "description": "app.config",
        "isExtraImport": true,
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "env",
        "importPath": "app.config",
        "description": "app.config",
        "isExtraImport": true,
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "env",
        "importPath": "app.config",
        "description": "app.config",
        "isExtraImport": true,
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "dj_database_url",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "dj_database_url",
        "description": "dj_database_url",
        "detail": "dj_database_url",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "split_settings.tools",
        "description": "split_settings.tools",
        "isExtraImport": true,
        "detail": "split_settings.tools",
        "documentation": {}
    },
    {
        "label": "CommaSeparatedStrings",
        "importPath": "starlette.datastructures",
        "description": "starlette.datastructures",
        "isExtraImport": true,
        "detail": "starlette.datastructures",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "URLPattern",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "URLResolver",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "importPath": "app.config.web",
        "description": "app.config.web",
        "isExtraImport": true,
        "detail": "app.config.web",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "importPath": "app.config.web",
        "description": "app.config.web",
        "isExtraImport": true,
        "detail": "app.config.web",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "BaseClient",
        "importPath": "app.services.search_services.base",
        "description": "app.services.search_services.base",
        "isExtraImport": true,
        "detail": "app.services.search_services.base",
        "documentation": {}
    },
    {
        "label": "HasSearchEntities",
        "importPath": "app.services.search_services.base",
        "description": "app.services.search_services.base",
        "isExtraImport": true,
        "detail": "app.services.search_services.base",
        "documentation": {}
    },
    {
        "label": "BaseClient",
        "importPath": "app.services.search_services.base",
        "description": "app.services.search_services.base",
        "isExtraImport": true,
        "detail": "app.services.search_services.base",
        "documentation": {}
    },
    {
        "label": "HasSearchEntities",
        "importPath": "app.services.search_services.base",
        "description": "app.services.search_services.base",
        "isExtraImport": true,
        "detail": "app.services.search_services.base",
        "documentation": {}
    },
    {
        "label": "AiohttpSession",
        "importPath": "aiogram.client.session.aiohttp",
        "description": "aiogram.client.session.aiohttp",
        "isExtraImport": true,
        "detail": "aiogram.client.session.aiohttp",
        "documentation": {}
    },
    {
        "label": "AiohttpSession",
        "importPath": "aiogram.client.session.aiohttp",
        "description": "aiogram.client.session.aiohttp",
        "isExtraImport": true,
        "detail": "aiogram.client.session.aiohttp",
        "documentation": {}
    },
    {
        "label": "RUNNING_MODE",
        "importPath": "app.config.bot",
        "description": "app.config.bot",
        "isExtraImport": true,
        "detail": "app.config.bot",
        "documentation": {}
    },
    {
        "label": "TG_TOKEN",
        "importPath": "app.config.bot",
        "description": "app.config.bot",
        "isExtraImport": true,
        "detail": "app.config.bot",
        "documentation": {}
    },
    {
        "label": "RunningMode",
        "importPath": "app.config.bot",
        "description": "app.config.bot",
        "isExtraImport": true,
        "detail": "app.config.bot",
        "documentation": {}
    },
    {
        "label": "RUNNING_MODE",
        "importPath": "app.config.bot",
        "description": "app.config.bot",
        "isExtraImport": true,
        "detail": "app.config.bot",
        "documentation": {}
    },
    {
        "label": "TG_TOKEN",
        "importPath": "app.config.bot",
        "description": "app.config.bot",
        "isExtraImport": true,
        "detail": "app.config.bot",
        "documentation": {}
    },
    {
        "label": "RunningMode",
        "importPath": "app.config.bot",
        "description": "app.config.bot",
        "isExtraImport": true,
        "detail": "app.config.bot",
        "documentation": {}
    },
    {
        "label": "ErrorLogger",
        "importPath": "app.services.error_logger",
        "description": "app.services.error_logger",
        "isExtraImport": true,
        "detail": "app.services.error_logger",
        "documentation": {}
    },
    {
        "label": "ErrorLogger",
        "importPath": "app.services.error_logger",
        "description": "app.services.error_logger",
        "isExtraImport": true,
        "detail": "app.services.error_logger",
        "documentation": {}
    },
    {
        "label": "telethon",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "telethon",
        "description": "telethon",
        "detail": "telethon",
        "documentation": {}
    },
    {
        "label": "TelegramClient",
        "importPath": "telethon",
        "description": "telethon",
        "isExtraImport": true,
        "detail": "telethon",
        "documentation": {}
    },
    {
        "label": "TelegramClient",
        "importPath": "telethon",
        "description": "telethon",
        "isExtraImport": true,
        "detail": "telethon",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "telethon",
        "description": "telethon",
        "isExtraImport": true,
        "detail": "telethon",
        "documentation": {}
    },
    {
        "label": "TelegramClient",
        "importPath": "telethon",
        "description": "telethon",
        "isExtraImport": true,
        "detail": "telethon",
        "documentation": {}
    },
    {
        "label": "functions",
        "importPath": "telethon",
        "description": "telethon",
        "isExtraImport": true,
        "detail": "telethon",
        "documentation": {}
    },
    {
        "label": "types",
        "importPath": "telethon",
        "description": "telethon",
        "isExtraImport": true,
        "detail": "telethon",
        "documentation": {}
    },
    {
        "label": "TelegramClient",
        "importPath": "telethon",
        "description": "telethon",
        "isExtraImport": true,
        "detail": "telethon",
        "documentation": {}
    },
    {
        "label": "SearchTelehramUserRepository",
        "importPath": "app.apps.core.repositories.search_telegram_user",
        "description": "app.apps.core.repositories.search_telegram_user",
        "isExtraImport": true,
        "detail": "app.apps.core.repositories.search_telegram_user",
        "documentation": {}
    },
    {
        "label": "SearchTelehramUserRepository",
        "importPath": "app.apps.core.repositories.search_telegram_user",
        "description": "app.apps.core.repositories.search_telegram_user",
        "isExtraImport": true,
        "detail": "app.apps.core.repositories.search_telegram_user",
        "documentation": {}
    },
    {
        "label": "SearchTelehramUserRepository",
        "importPath": "app.apps.core.repositories.search_telegram_user",
        "description": "app.apps.core.repositories.search_telegram_user",
        "isExtraImport": true,
        "detail": "app.apps.core.repositories.search_telegram_user",
        "documentation": {}
    },
    {
        "label": "EntitiesMaker",
        "importPath": "app.services.search_services.entites_maker",
        "description": "app.services.search_services.entites_maker",
        "isExtraImport": true,
        "detail": "app.services.search_services.entites_maker",
        "documentation": {}
    },
    {
        "label": "TelegramInformator",
        "importPath": "app.services.search_services.info.telegram_informator",
        "description": "app.services.search_services.info.telegram_informator",
        "isExtraImport": true,
        "detail": "app.services.search_services.info.telegram_informator",
        "documentation": {}
    },
    {
        "label": "TelegramChatsParser",
        "importPath": "app.services.search_services.parsers.telegram_chats_parser",
        "description": "app.services.search_services.parsers.telegram_chats_parser",
        "isExtraImport": true,
        "detail": "app.services.search_services.parsers.telegram_chats_parser",
        "documentation": {}
    },
    {
        "label": "telegram_daemon",
        "importPath": "app.services.telethon_sessions",
        "description": "app.services.telethon_sessions",
        "isExtraImport": true,
        "detail": "app.services.telethon_sessions",
        "documentation": {}
    },
    {
        "label": "telegram_iteration",
        "importPath": "app.services.telethon_sessions",
        "description": "app.services.telethon_sessions",
        "isExtraImport": true,
        "detail": "app.services.telethon_sessions",
        "documentation": {}
    },
    {
        "label": "telegram_daemon",
        "importPath": "app.services.telethon_sessions",
        "description": "app.services.telethon_sessions",
        "isExtraImport": true,
        "detail": "app.services.telethon_sessions",
        "documentation": {}
    },
    {
        "label": "telegram_iteration",
        "importPath": "app.services.telethon_sessions",
        "description": "app.services.telethon_sessions",
        "isExtraImport": true,
        "detail": "app.services.telethon_sessions",
        "documentation": {}
    },
    {
        "label": "GetHistoryRequest",
        "importPath": "telethon.tl.functions.messages",
        "description": "telethon.tl.functions.messages",
        "isExtraImport": true,
        "detail": "telethon.tl.functions.messages",
        "documentation": {}
    },
    {
        "label": "GetUsersRequest",
        "importPath": "telethon.tl.functions.users",
        "description": "telethon.tl.functions.users",
        "isExtraImport": true,
        "detail": "telethon.tl.functions.users",
        "documentation": {}
    },
    {
        "label": "PeerUser",
        "importPath": "telethon.tl.types",
        "description": "telethon.tl.types",
        "isExtraImport": true,
        "detail": "telethon.tl.types",
        "documentation": {}
    },
    {
        "label": "PeerChat",
        "importPath": "telethon.tl.types",
        "description": "telethon.tl.types",
        "isExtraImport": true,
        "detail": "telethon.tl.types",
        "documentation": {}
    },
    {
        "label": "PeerChannel",
        "importPath": "telethon.tl.types",
        "description": "telethon.tl.types",
        "isExtraImport": true,
        "detail": "telethon.tl.types",
        "documentation": {}
    },
    {
        "label": "PeerUser",
        "importPath": "telethon.tl.types",
        "description": "telethon.tl.types",
        "isExtraImport": true,
        "detail": "telethon.tl.types",
        "documentation": {}
    },
    {
        "label": "PeerChat",
        "importPath": "telethon.tl.types",
        "description": "telethon.tl.types",
        "isExtraImport": true,
        "detail": "telethon.tl.types",
        "documentation": {}
    },
    {
        "label": "PeerChannel",
        "importPath": "telethon.tl.types",
        "description": "telethon.tl.types",
        "isExtraImport": true,
        "detail": "telethon.tl.types",
        "documentation": {}
    },
    {
        "label": "JoinChatlistInviteRequest",
        "importPath": "telethon.tl.functions.chatlists",
        "description": "telethon.tl.functions.chatlists",
        "isExtraImport": true,
        "detail": "telethon.tl.functions.chatlists",
        "documentation": {}
    },
    {
        "label": "redis",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "redis",
        "description": "redis",
        "detail": "redis",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Case",
        "kind": 6,
        "importPath": "app.apps.core.bot.cases.__case",
        "description": "app.apps.core.bot.cases.__case",
        "peekOfCode": "class Case(CanResponse, HasIogramEntites):\n    def __init__(self, message: Message | None = None) -> None:\n        if message:\n            self.message = message",
        "detail": "app.apps.core.bot.cases.__case",
        "documentation": {}
    },
    {
        "label": "AdvancedModeCase",
        "kind": 6,
        "importPath": "app.apps.core.bot.cases.advanced_mode",
        "description": "app.apps.core.bot.cases.advanced_mode",
        "peekOfCode": "class AdvancedModeCase(Case):\n    message: Message\n    state: FSMContext\n    @sync_to_async\n    def change():\n        return",
        "detail": "app.apps.core.bot.cases.advanced_mode",
        "documentation": {}
    },
    {
        "label": "SearchCase",
        "kind": 6,
        "importPath": "app.apps.core.bot.cases.search",
        "description": "app.apps.core.bot.cases.search",
        "peekOfCode": "class SearchCase(Case):\n    async def make_search(self, user:TelegramUser, tariff:TariffPlan, callback_data: SearchCallbackData):\n        keywords: KeywordsDto = SearchRepository.get_keywords_from_cache(callback_data.id, self.message.message_id)\n        data: SearchDto = SearchRepository.get_search_from_cache(callback_data.id)\n        data.set_attributes({\n            'search_type': SearchType.telegram_chats.name,\n            'entity_message_id': self.message.message_id,\n            'entity_chat_id': self.message.chat.id,\n            'status': SearchStatus.ready.name,\n            'user': user,",
        "detail": "app.apps.core.bot.cases.search",
        "documentation": {}
    },
    {
        "label": "TariffCase",
        "kind": 6,
        "importPath": "app.apps.core.bot.cases.tariff_case",
        "description": "app.apps.core.bot.cases.tariff_case",
        "peekOfCode": "class TariffCase(Case):\n    message: Message\n    state: FSMContext\n    @sync_to_async\n    def change():\n        return",
        "detail": "app.apps.core.bot.cases.tariff_case",
        "documentation": {}
    },
    {
        "label": "TelegramUserCase",
        "kind": 6,
        "importPath": "app.apps.core.bot.cases.telegram_user_case",
        "description": "app.apps.core.bot.cases.telegram_user_case",
        "peekOfCode": "class TelegramUserCase(Case):\n    repo: UserRepository = UserRepository\n    message: Message\n    state: FSMContext\n    async def answer_for_name(self):\n        await self.message.answer(transl('start.question_name'), reply_markup=force_reply())\n        await self.state.set_state(GetUsername.get_username)\n    async def answer_for_work(self, user: TelegramUser):\n        text = as_list(\n            Bold(f'Здравствуйте, {user.telegram_name}!'),",
        "detail": "app.apps.core.bot.cases.telegram_user_case",
        "documentation": {}
    },
    {
        "label": "WorkCase",
        "kind": 6,
        "importPath": "app.apps.core.bot.cases.work_case",
        "description": "app.apps.core.bot.cases.work_case",
        "peekOfCode": "class WorkCase(Case):\n    async def set_keywords(self):\n        data = SearchRepository.get_search_from_cache(self.get_user_id())\n        tariff = await UserRepository.get_permited_tariff(self.get_user_id())\n        allowed = tariff.keyword_quantity\n        keywords = self.parse_keywords(self.message.poll.options, allowed)\n        dto = KeywordsDto({\n            'name': self.message.poll.question,\n            'options': keywords\n        })",
        "detail": "app.apps.core.bot.cases.work_case",
        "documentation": {}
    },
    {
        "label": "BaseController",
        "kind": 6,
        "importPath": "app.apps.core.bot.controllers._base_controller",
        "description": "app.apps.core.bot.controllers._base_controller",
        "peekOfCode": "class BaseController(HasIogramEntites, CanResponse):\n    case: Case\n    def __init__(self, *args):\n        HasIogramEntites.__init__(self, *args)\n        self.set_to_case()\n    # def __init__(self, message: Message, bot: Bot | None = None, state: FSMContext | None = None):\n    #     HasIogramEntites.__init__(self, message, bot, state)\n    #     self.set_case()\n    def set_to_case(self):\n        if (self.case):",
        "detail": "app.apps.core.bot.controllers._base_controller",
        "documentation": {}
    },
    {
        "label": "AdvancedModeController",
        "kind": 6,
        "importPath": "app.apps.core.bot.controllers.advanced_mode",
        "description": "app.apps.core.bot.controllers.advanced_mode",
        "peekOfCode": "class AdvancedModeController(BaseController):\n    case: AdvancedModeCase = AdvancedModeCase()\n    async def show_info(self, data: UserCallbackData):\n        await self.message.delete()\n        await self.response(\n           messager('show_advanced_mode_info')\n        )\n        #  \"info\":{\n        # \"telegram\":{\n        #     \"advanced_mode\":{",
        "detail": "app.apps.core.bot.controllers.advanced_mode",
        "documentation": {}
    },
    {
        "label": "CheckController",
        "kind": 6,
        "importPath": "app.apps.core.bot.controllers.check",
        "description": "app.apps.core.bot.controllers.check",
        "peekOfCode": "class CheckController(BaseController):\n    case: TelegramUserCase = TelegramUserCase()\n    repo: DebtorRepository = DebtorRepository\n    message: Message\n    state: FSMContext\n    def get_years_from_iin(self, iin: str) -> List[int]:\n        year_str = iin[:2]\n        if(year_str[0] == '0'):\n            year = int(f'20{year_str}')\n        else:",
        "detail": "app.apps.core.bot.controllers.check",
        "documentation": {}
    },
    {
        "label": "JobController",
        "kind": 6,
        "importPath": "app.apps.core.bot.controllers.job",
        "description": "app.apps.core.bot.controllers.job",
        "peekOfCode": "class JobController(BaseController):\n    case: WorkCase = WorkCase()\n    async def save_chats(self, callback_data:UserCallbackData):\n        data = SearchRepository.get_search_from_cache(callback_data.id)\n        tariff = await UserRepository.get_permited_tariff(callback_data.id)\n        await self.edit(\n            text=messager('get_chats', data.chats),\n            reply_markup=set_chats_keyboard(\n                callback_data.id, tariff.id, show_save=False)\n        )",
        "detail": "app.apps.core.bot.controllers.job",
        "documentation": {}
    },
    {
        "label": "ReviewController",
        "kind": 6,
        "importPath": "app.apps.core.bot.controllers.review",
        "description": "app.apps.core.bot.controllers.review",
        "peekOfCode": "class ReviewController(BaseController):\n    def register_admin(self):\n        pass\n    def approve_user(self):\n        pass",
        "detail": "app.apps.core.bot.controllers.review",
        "documentation": {}
    },
    {
        "label": "SearchController",
        "kind": 6,
        "importPath": "app.apps.core.bot.controllers.search",
        "description": "app.apps.core.bot.controllers.search",
        "peekOfCode": "class SearchController(BaseController):\n    case: SearchCase = SearchCase()\n    async def get_status(self, callback_data: SearchCallbackData):\n        search = SearchDto(\n            await SearchRepository.find(callback_data.search_id)\n        )\n        if search.status == SearchStatus.ready.name or search.status == SearchStatus.in_process.name:\n            status = SearchStatus.in_process.name\n            return await self.reply(messager('get_search_status', status), autodelete_seconds=3)\n        if search.status == SearchStatus.error.name:",
        "detail": "app.apps.core.bot.controllers.search",
        "documentation": {}
    },
    {
        "label": "StartController",
        "kind": 6,
        "importPath": "app.apps.core.bot.controllers.start",
        "description": "app.apps.core.bot.controllers.start",
        "peekOfCode": "class StartController(BaseController):\n    case: TelegramUserCase = TelegramUserCase()\n    async def __call__(self):\n        message = self.message\n        if message.from_user is None:\n            return\n        await self.case.handle_start()",
        "detail": "app.apps.core.bot.controllers.start",
        "documentation": {}
    },
    {
        "label": "UserController",
        "kind": 6,
        "importPath": "app.apps.core.bot.controllers.user",
        "description": "app.apps.core.bot.controllers.user",
        "peekOfCode": "class UserController(BaseController):\n    case: TelegramUserCase = TelegramUserCase()\n    async def set_name(self):\n        await self.case.check_and_set_name()\n    async def ask_writer(self):\n        await self.case.ask_writer()    \n    async def allow_writer(self, data:UserCallbackData):\n        await self.case.allow_writer(data)",
        "detail": "app.apps.core.bot.controllers.user",
        "documentation": {}
    },
    {
        "label": "UserSearchAccauntController",
        "kind": 6,
        "importPath": "app.apps.core.bot.controllers.user_search_account",
        "description": "app.apps.core.bot.controllers.user_search_account",
        "peekOfCode": "class UserSearchAccauntController:\n    pass",
        "detail": "app.apps.core.bot.controllers.user_search_account",
        "documentation": {}
    },
    {
        "label": "advanced_info",
        "kind": 2,
        "importPath": "app.apps.core.bot.keyboards.advanced_mode",
        "description": "app.apps.core.bot.keyboards.advanced_mode",
        "peekOfCode": "def advanced_info() -> InlineKeyboardMarkup:\n    builder = InlineKeyboardBuilder()\n    builder.add(\n        make_inline_btn('buttons.continue', action='start_set_advanced_mode')\n    )\n    return builder.as_markup(resize_keyboard=True)\ndef set_token() -> InlineKeyboardMarkup:\n    builder = InlineKeyboardBuilder()\n    builder.add(\n        make_inline_btn('buttons.continue', action='start_set_advanced_mode')",
        "detail": "app.apps.core.bot.keyboards.advanced_mode",
        "documentation": {}
    },
    {
        "label": "set_token",
        "kind": 2,
        "importPath": "app.apps.core.bot.keyboards.advanced_mode",
        "description": "app.apps.core.bot.keyboards.advanced_mode",
        "peekOfCode": "def set_token() -> InlineKeyboardMarkup:\n    builder = InlineKeyboardBuilder()\n    builder.add(\n        make_inline_btn('buttons.continue', action='start_set_advanced_mode')\n    )\n    return builder.as_markup(resize_keyboard=True)",
        "detail": "app.apps.core.bot.keyboards.advanced_mode",
        "documentation": {}
    },
    {
        "label": "change_tariff_btn",
        "kind": 2,
        "importPath": "app.apps.core.bot.keyboards.buttons",
        "description": "app.apps.core.bot.keyboards.buttons",
        "peekOfCode": "def change_tariff_btn(user_id, tariff_id=None, msg_id: Message = None, action_type='expired'):\n    return make_inline_btn('buttons.tariff.change',\n                           action='buy_tariff',\n                           id=user_id,\n                           tariff_id=tariff_id,\n                           message_id=msg_id,\n                           type=action_type)\ndef clear_chat_btn(id, msg_id=None):\n    return make_inline_btn('buttons.bot.clear_chats', action='clear_search_chats', id=id, message_id=msg_id)\ndef clear_keywords_btn(id):",
        "detail": "app.apps.core.bot.keyboards.buttons",
        "documentation": {}
    },
    {
        "label": "clear_chat_btn",
        "kind": 2,
        "importPath": "app.apps.core.bot.keyboards.buttons",
        "description": "app.apps.core.bot.keyboards.buttons",
        "peekOfCode": "def clear_chat_btn(id, msg_id=None):\n    return make_inline_btn('buttons.bot.clear_chats', action='clear_search_chats', id=id, message_id=msg_id)\ndef clear_keywords_btn(id):\n    return make_inline_btn('buttons.bot.clear_chats', action='clear_search_chats', id=id)\ndef make_inline_btn(\n    transl_text,\n    action: str | None = None,\n    callback_data=UserCallbackData,\n    **args\n):",
        "detail": "app.apps.core.bot.keyboards.buttons",
        "documentation": {}
    },
    {
        "label": "clear_keywords_btn",
        "kind": 2,
        "importPath": "app.apps.core.bot.keyboards.buttons",
        "description": "app.apps.core.bot.keyboards.buttons",
        "peekOfCode": "def clear_keywords_btn(id):\n    return make_inline_btn('buttons.bot.clear_chats', action='clear_search_chats', id=id)\ndef make_inline_btn(\n    transl_text,\n    action: str | None = None,\n    callback_data=UserCallbackData,\n    **args\n):\n    if (action):\n        callback_data = callback_data(**(args | {'action': action})).pack()",
        "detail": "app.apps.core.bot.keyboards.buttons",
        "documentation": {}
    },
    {
        "label": "make_inline_btn",
        "kind": 2,
        "importPath": "app.apps.core.bot.keyboards.buttons",
        "description": "app.apps.core.bot.keyboards.buttons",
        "peekOfCode": "def make_inline_btn(\n    transl_text,\n    action: str | None = None,\n    callback_data=UserCallbackData,\n    **args\n):\n    if (action):\n        callback_data = callback_data(**(args | {'action': action})).pack()\n    else:\n        callback_data = None",
        "detail": "app.apps.core.bot.keyboards.buttons",
        "documentation": {}
    },
    {
        "label": "clear_btn",
        "kind": 2,
        "importPath": "app.apps.core.bot.keyboards.buttons",
        "description": "app.apps.core.bot.keyboards.buttons",
        "peekOfCode": "def clear_btn(btn_text='buttons.clear', **args):\n    return make_inline_btn(btn_text, **args)\ndef delete_msg(btn_text='buttons.clear', **args,):\n    return make_inline_btn(btn_text, action='delete_message', **args)\ndef save_btn(btn_text='buttons.save', **args):\n    return make_inline_btn(btn_text, **args)\ndef request_chat_btn(id, btn_text='buttons.bot.add_chat'):\n    return KeyboardButton(\n                text=transl(btn_text),\n                request_chat=KeyboardButtonRequestChat(",
        "detail": "app.apps.core.bot.keyboards.buttons",
        "documentation": {}
    },
    {
        "label": "delete_msg",
        "kind": 2,
        "importPath": "app.apps.core.bot.keyboards.buttons",
        "description": "app.apps.core.bot.keyboards.buttons",
        "peekOfCode": "def delete_msg(btn_text='buttons.clear', **args,):\n    return make_inline_btn(btn_text, action='delete_message', **args)\ndef save_btn(btn_text='buttons.save', **args):\n    return make_inline_btn(btn_text, **args)\ndef request_chat_btn(id, btn_text='buttons.bot.add_chat'):\n    return KeyboardButton(\n                text=transl(btn_text),\n                request_chat=KeyboardButtonRequestChat(\n                    request_id=id, chat_is_channel=False)\n            )",
        "detail": "app.apps.core.bot.keyboards.buttons",
        "documentation": {}
    },
    {
        "label": "save_btn",
        "kind": 2,
        "importPath": "app.apps.core.bot.keyboards.buttons",
        "description": "app.apps.core.bot.keyboards.buttons",
        "peekOfCode": "def save_btn(btn_text='buttons.save', **args):\n    return make_inline_btn(btn_text, **args)\ndef request_chat_btn(id, btn_text='buttons.bot.add_chat'):\n    return KeyboardButton(\n                text=transl(btn_text),\n                request_chat=KeyboardButtonRequestChat(\n                    request_id=id, chat_is_channel=False)\n            )\ndef request_poll_btn(btn_text='buttons.bot.add_words', type='regular'):\n    return  KeyboardButton(",
        "detail": "app.apps.core.bot.keyboards.buttons",
        "documentation": {}
    },
    {
        "label": "request_chat_btn",
        "kind": 2,
        "importPath": "app.apps.core.bot.keyboards.buttons",
        "description": "app.apps.core.bot.keyboards.buttons",
        "peekOfCode": "def request_chat_btn(id, btn_text='buttons.bot.add_chat'):\n    return KeyboardButton(\n                text=transl(btn_text),\n                request_chat=KeyboardButtonRequestChat(\n                    request_id=id, chat_is_channel=False)\n            )\ndef request_poll_btn(btn_text='buttons.bot.add_words', type='regular'):\n    return  KeyboardButton(\n                text=transl(btn_text),\n                request_poll=KeyboardButtonPollType(type=type)",
        "detail": "app.apps.core.bot.keyboards.buttons",
        "documentation": {}
    },
    {
        "label": "request_poll_btn",
        "kind": 2,
        "importPath": "app.apps.core.bot.keyboards.buttons",
        "description": "app.apps.core.bot.keyboards.buttons",
        "peekOfCode": "def request_poll_btn(btn_text='buttons.bot.add_words', type='regular'):\n    return  KeyboardButton(\n                text=transl(btn_text),\n                request_poll=KeyboardButtonPollType(type=type)\n            )",
        "detail": "app.apps.core.bot.keyboards.buttons",
        "documentation": {}
    },
    {
        "label": "reply_keyboard",
        "kind": 2,
        "importPath": "app.apps.core.bot.keyboards.main",
        "description": "app.apps.core.bot.keyboards.main",
        "peekOfCode": "def reply_keyboard(user: TelegramUser, hide_stay_admin: bool = False) -> ReplyKeyboardMarkup:\n    builder = ReplyKeyboardBuilder()\n    if not hide_stay_admin:\n        if user.role == UserRole.USER.value:\n            builder.button( text='Добавить недобросовестного клиента')\n    if user.role == UserRole.ADMIN.value or user.role == UserRole.WRITER.value:\n        builder.button(text='Добавить недобросовестного клиента',  web_app=WebAppInfo(url=\"https://rent-reviews.vercel.app\"))\n    builder.button(text='Проверить')\n    return builder.adjust(1,1).as_markup(resize_keyboard=False)\ndef allow_writer(user: TelegramUser) -> InlineKeyboardMarkup:",
        "detail": "app.apps.core.bot.keyboards.main",
        "documentation": {}
    },
    {
        "label": "allow_writer",
        "kind": 2,
        "importPath": "app.apps.core.bot.keyboards.main",
        "description": "app.apps.core.bot.keyboards.main",
        "peekOfCode": "def allow_writer(user: TelegramUser) -> InlineKeyboardMarkup:\n    return InlineKeyboardMarkup(inline_keyboard= [[\n        InlineKeyboardButton(\n            text='Утвердить',\n            callback_data=UserCallbackData(action='allow_writer', id=user.telegram_id).pack())\n    ]])\ndef moderate_review(review_id: TelegramUser) -> InlineKeyboardMarkup:\n    return InlineKeyboardMarkup(inline_keyboard= [[\n        InlineKeyboardButton(\n            text='Утвердить',",
        "detail": "app.apps.core.bot.keyboards.main",
        "documentation": {}
    },
    {
        "label": "moderate_review",
        "kind": 2,
        "importPath": "app.apps.core.bot.keyboards.main",
        "description": "app.apps.core.bot.keyboards.main",
        "peekOfCode": "def moderate_review(review_id: TelegramUser) -> InlineKeyboardMarkup:\n    return InlineKeyboardMarkup(inline_keyboard= [[\n        InlineKeyboardButton(\n            text='Утвердить',\n            callback_data=UserCallbackData(action='allow_review', id=review_id).pack()),\n        InlineKeyboardButton(\n            text='Редактировать',\n            callback_data=UserCallbackData(action='ask_edit_review', id=review_id).pack()),\n        InlineKeyboardButton(\n            text='Удалить',",
        "detail": "app.apps.core.bot.keyboards.main",
        "documentation": {}
    },
    {
        "label": "start_keyboard",
        "kind": 2,
        "importPath": "app.apps.core.bot.keyboards.main",
        "description": "app.apps.core.bot.keyboards.main",
        "peekOfCode": "def start_keyboard(user: TelegramUser) -> InlineKeyboardMarkup:\n    builder = InlineKeyboardBuilder()\n    if not user.is_admin:\n        builder.button(\n            text='Добавить недобросовестного клиента',\n            callback_data=UserCallbackData(\n                action='stay_admin',\n                id=user.telegram_id,\n            ).pack()\n        )",
        "detail": "app.apps.core.bot.keyboards.main",
        "documentation": {}
    },
    {
        "label": "Rules",
        "kind": 6,
        "importPath": "app.apps.core.bot.keyboards.rules",
        "description": "app.apps.core.bot.keyboards.rules",
        "peekOfCode": "class Rules:\n    initial = ReplyKeyboardMarkup(keyboard=[\n        [\n            KeyboardButton(\n                text=t('buttons.allowed_rules')\n            )\n        ]\n    ])",
        "detail": "app.apps.core.bot.keyboards.rules",
        "documentation": {}
    },
    {
        "label": "start_search",
        "kind": 2,
        "importPath": "app.apps.core.bot.keyboards.search",
        "description": "app.apps.core.bot.keyboards.search",
        "peekOfCode": "def start_search(user_id, search_id=None) -> InlineKeyboardMarkup:\n    return InlineKeyboardBuilder().button(\n        text=transl('buttons.bot.start_search'),\n        callback_data=UserCallbackData(\n            action='start_search', id=user_id, search_id=search_id).pack()\n    ).as_markup(resize_keyboard=True)\ndef keywords_keyboard(user_id, dto: KeywordsDto, search_id=None) -> InlineKeyboardMarkup:\n    builder = InlineKeyboardBuilder()\n    builder.button(\n        text=transl('buttons.bot.start_search'),",
        "detail": "app.apps.core.bot.keyboards.search",
        "documentation": {}
    },
    {
        "label": "keywords_keyboard",
        "kind": 2,
        "importPath": "app.apps.core.bot.keyboards.search",
        "description": "app.apps.core.bot.keyboards.search",
        "peekOfCode": "def keywords_keyboard(user_id, dto: KeywordsDto, search_id=None) -> InlineKeyboardMarkup:\n    builder = InlineKeyboardBuilder()\n    builder.button(\n        text=transl('buttons.bot.start_search'),\n        callback_data=SearchCallbackData(\n            action='start_search',\n            id=user_id,\n            search_id=search_id,\n            keyword_name=dto.name,\n        ).pack()",
        "detail": "app.apps.core.bot.keyboards.search",
        "documentation": {}
    },
    {
        "label": "change_tariff",
        "kind": 2,
        "importPath": "app.apps.core.bot.keyboards.search",
        "description": "app.apps.core.bot.keyboards.search",
        "peekOfCode": "def change_tariff(user_id, tariff_id) -> InlineKeyboardMarkup:\n    return InlineKeyboardMarkup(\n        inline_keyboard=[\n            [\n                change_tariff_btn(user_id, tariff_id)\n            ]\n        ], resize_keyboard=True)\ndef force_reply(placeholder: str | None = None):\n    return ForceReply(input_field_placeholder=placeholder)\ndef clear_chats(user_id, tariff_id=None, show_save=True):",
        "detail": "app.apps.core.bot.keyboards.search",
        "documentation": {}
    },
    {
        "label": "force_reply",
        "kind": 2,
        "importPath": "app.apps.core.bot.keyboards.search",
        "description": "app.apps.core.bot.keyboards.search",
        "peekOfCode": "def force_reply(placeholder: str | None = None):\n    return ForceReply(input_field_placeholder=placeholder)\ndef clear_chats(user_id, tariff_id=None, show_save=True):\n    builder = InlineKeyboardBuilder()\n    builder.add(clear_chat_btn(user_id))\n    if (tariff_id):\n        builder.add(\n            change_tariff_btn(id=user_id, tariff_id=tariff_id,\n                              action_type='chats_reached')\n        )",
        "detail": "app.apps.core.bot.keyboards.search",
        "documentation": {}
    },
    {
        "label": "clear_chats",
        "kind": 2,
        "importPath": "app.apps.core.bot.keyboards.search",
        "description": "app.apps.core.bot.keyboards.search",
        "peekOfCode": "def clear_chats(user_id, tariff_id=None, show_save=True):\n    builder = InlineKeyboardBuilder()\n    builder.add(clear_chat_btn(user_id))\n    if (tariff_id):\n        builder.add(\n            change_tariff_btn(id=user_id, tariff_id=tariff_id,\n                              action_type='chats_reached')\n        )\n    if (show_save):\n        builder.row(",
        "detail": "app.apps.core.bot.keyboards.search",
        "documentation": {}
    },
    {
        "label": "search_status",
        "kind": 2,
        "importPath": "app.apps.core.bot.keyboards.search",
        "description": "app.apps.core.bot.keyboards.search",
        "peekOfCode": "def search_status(user_id, search_msg_id, chat_id, search_id):\n    return InlineKeyboardMarkup(inline_keyboard=[\n        [\n            InlineKeyboardButton(\n                text=transl('buttons.status'),\n                callback_data=SearchCallbackData(\n                    action='search_status',\n                    id=user_id,\n                    chat_id=chat_id,\n                    search_id=search_id,",
        "detail": "app.apps.core.bot.keyboards.search",
        "documentation": {}
    },
    {
        "label": "search_status_or_delete",
        "kind": 2,
        "importPath": "app.apps.core.bot.keyboards.search",
        "description": "app.apps.core.bot.keyboards.search",
        "peekOfCode": "def search_status_or_delete(user_id, search_msg_id, chat_id, search_id):\n    return InlineKeyboardMarkup(inline_keyboard=[\n        [\n            make_inline_btn(\n                    transl_text='buttons.status',\n                    action='search_status',\n                    callback_data=SearchCallbackData,\n                    id=user_id,\n                    chat_id=chat_id,\n                    search_id=search_id,",
        "detail": "app.apps.core.bot.keyboards.search",
        "documentation": {}
    },
    {
        "label": "buy_tariff_inline",
        "kind": 2,
        "importPath": "app.apps.core.bot.keyboards.search",
        "description": "app.apps.core.bot.keyboards.search",
        "peekOfCode": "def buy_tariff_inline(user_id, tariff_id=None, msg_id: Message = None, action_type='expired'):\n    builder = InlineKeyboardBuilder()\n    builder.add(\n        change_tariff_btn(user_id, tariff_id, msg_id, action_type)\n    )\n    return builder.as_markup(resize_keyboard=True)\ndef ask_advanced_mode():\n    builder = InlineKeyboardBuilder()\n    builder.add(\n        make_inline_btn(",
        "detail": "app.apps.core.bot.keyboards.search",
        "documentation": {}
    },
    {
        "label": "ask_advanced_mode",
        "kind": 2,
        "importPath": "app.apps.core.bot.keyboards.search",
        "description": "app.apps.core.bot.keyboards.search",
        "peekOfCode": "def ask_advanced_mode():\n    builder = InlineKeyboardBuilder()\n    builder.add(\n        make_inline_btn(\n                    transl_text='buttons.ask_advanced_mode',\n                    action='advanced_mode_info',\n            ), \n    )\n    builder.add(\n        delete_msg(btn_text='buttons.ignore')",
        "detail": "app.apps.core.bot.keyboards.search",
        "documentation": {}
    },
    {
        "label": "set_chats_keyboard",
        "kind": 2,
        "importPath": "app.apps.core.bot.keyboards.search",
        "description": "app.apps.core.bot.keyboards.search",
        "peekOfCode": "def set_chats_keyboard(user_id, tariff_id=None, limit_msg: Message | None = None, show_save: bool =True):\n    builder = InlineKeyboardBuilder()\n    if (isinstance(limit_msg, Message)):\n        limit_id = limit_msg.message_id\n    else:\n        limit_id = None\n    builder.add(clear_chat_btn(id=user_id, msg_id=limit_id))\n    if (tariff_id and limit_msg):\n        builder.add(\n            change_tariff_btn(user_id, tariff_id, limit_id, 'chats_reached')",
        "detail": "app.apps.core.bot.keyboards.search",
        "documentation": {}
    },
    {
        "label": "next_step",
        "kind": 2,
        "importPath": "app.apps.core.bot.keyboards.search",
        "description": "app.apps.core.bot.keyboards.search",
        "peekOfCode": "def next_step(step='set_chats'):\n    builder = ReplyKeyboardBuilder()\n    builder.add(KeyboardButton(\n                text=transl('buttons.bot.nex_step'),\n                callback_data=step\n                ))\n    return builder.as_markup(resize_keyboard=True)\ndef set_chats(id, show=True, chat_id=None):\n    builder = ReplyKeyboardBuilder()\n    if (show):",
        "detail": "app.apps.core.bot.keyboards.search",
        "documentation": {}
    },
    {
        "label": "set_chats",
        "kind": 2,
        "importPath": "app.apps.core.bot.keyboards.search",
        "description": "app.apps.core.bot.keyboards.search",
        "peekOfCode": "def set_chats(id, show=True, chat_id=None):\n    builder = ReplyKeyboardBuilder()\n    if (show):\n        builder.add(request_chat_btn(id))\n    return builder.as_markup(resize_keyboard=True)\ndef set_keywords(show=True):\n    builder = ReplyKeyboardBuilder()\n    if (show):\n        builder.add(request_poll_btn())\n    return builder.as_markup(resize_keyboard=True)",
        "detail": "app.apps.core.bot.keyboards.search",
        "documentation": {}
    },
    {
        "label": "set_keywords",
        "kind": 2,
        "importPath": "app.apps.core.bot.keyboards.search",
        "description": "app.apps.core.bot.keyboards.search",
        "peekOfCode": "def set_keywords(show=True):\n    builder = ReplyKeyboardBuilder()\n    if (show):\n        builder.add(request_poll_btn())\n    return builder.as_markup(resize_keyboard=True)\ndef max_chats(id):\n    return ReplyKeyboardMarkup(\n        keyboard=[\n            [\n                KeyboardButton(",
        "detail": "app.apps.core.bot.keyboards.search",
        "documentation": {}
    },
    {
        "label": "max_chats",
        "kind": 2,
        "importPath": "app.apps.core.bot.keyboards.search",
        "description": "app.apps.core.bot.keyboards.search",
        "peekOfCode": "def max_chats(id):\n    return ReplyKeyboardMarkup(\n        keyboard=[\n            [\n                KeyboardButton(\n                    text=transl('buttons.bot.nex_step'),\n                    callback_data='for_keywords'\n                ),\n                KeyboardButton(\n                    text=transl('buttons.bot.clear_chats'),",
        "detail": "app.apps.core.bot.keyboards.search",
        "documentation": {}
    },
    {
        "label": "Tariff",
        "kind": 6,
        "importPath": "app.apps.core.bot.keyboards.tariff",
        "description": "app.apps.core.bot.keyboards.tariff",
        "peekOfCode": "class Tariff:\n    actions: InlineKeyboardMarkup(inline_keyboard=[\n        [\n            InlineKeyboardButton(\n                text=t('buttons.tariff.change'),\n                callback_data='tariff.change'\n            ),\n            InlineKeyboardButton(\n                text=t('buttons.tariff.update'),\n                callback_data='tariff.update'",
        "detail": "app.apps.core.bot.keyboards.tariff",
        "documentation": {}
    },
    {
        "label": "DbSessionMiddleware",
        "kind": 6,
        "importPath": "app.apps.core.bot.middlewares.db_session_middleware",
        "description": "app.apps.core.bot.middlewares.db_session_middleware",
        "peekOfCode": "class DbSessionMiddleware(BaseMiddleware):\n    \"\"\"Прокидывает сессию с БД в хендлеры\"\"\"\n    async def __call__(\n        self,\n        handler: Callable[[Update, Dict[str, Any]], Awaitable[Any]],\n        event: Update,\n        data: Dict[str, Any]\n    ) -> Any:\n        async with data['session_maker']() as session:\n            data['session'] = session",
        "detail": "app.apps.core.bot.middlewares.db_session_middleware",
        "documentation": {}
    },
    {
        "label": "HasTariffMiddleware",
        "kind": 6,
        "importPath": "app.apps.core.bot.middlewares.has_tariff",
        "description": "app.apps.core.bot.middlewares.has_tariff",
        "peekOfCode": "class HasTariffMiddleware(BaseMiddleware):\n    async def __call__(\n        self, \n        handler: Callable[[Update, Dict[str, Any]], Awaitable[Any]], \n        event: Update, \n        data: Dict[str, Any]\n    ) -> Any:\n        # telegram_user: Union[user.User, None] = data.get('event_from_user')\n        # db_user:TelegramUser = await UserRepository.find(telegram_user.id)\n        # if db_user:",
        "detail": "app.apps.core.bot.middlewares.has_tariff",
        "documentation": {}
    },
    {
        "label": "LanguageMiddleware",
        "kind": 6,
        "importPath": "app.apps.core.bot.middlewares.language",
        "description": "app.apps.core.bot.middlewares.language",
        "peekOfCode": "class LanguageMiddleware(BaseMiddleware):\n    async def __call__(\n        self, \n        handler: Callable[[Update, Dict[str, Any]], Awaitable[Any]], \n        event: Update, \n        data: Dict[str, Any]\n    ) -> Any:\n        telegram_user: Union[user.User, None] = data.get('event_from_user')\n        await Translator.set_locale(telegram_user.language_code)\n        return await handler(event, data)",
        "detail": "app.apps.core.bot.middlewares.language",
        "documentation": {}
    },
    {
        "label": "MainMiddleware",
        "kind": 6,
        "importPath": "app.apps.core.bot.middlewares.main",
        "description": "app.apps.core.bot.middlewares.main",
        "peekOfCode": "class MainMiddleware(BaseMiddleware):\n    async def __call__(\n        self, \n        handler: Callable[[Update, Dict[str, Any]], Awaitable[Any]], \n        event: Update, \n        data: Dict[str, Any]\n    ) -> Any:\n        telegram_user: Union[user.User, None] = data.get('event_from_user')\n        if not telegram_user:\n            return await handler(event, data)",
        "detail": "app.apps.core.bot.middlewares.main",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.apps.core.bot.routes.admin_router",
        "description": "app.apps.core.bot.routes.admin_router",
        "peekOfCode": "router = Router()\n# router.include_router(admin_menu_router)\n# router.include_router(user_card_router)\n# router.include_router(user_requests_router)\n# @router.message(Command(\"admin\"))\n# async def admin_command(message: types.Message) -> None:\n#     await message.answer(\"<b>Меню администратора:</b>\", reply_markup=admin_menu(), parse_mode='HTML')\n# @router.callback_query(F.data == 'admin')\n# async def back_admin_menu(call: types.CallbackQuery) -> None:\n#     await call.message.edit_text(\"<b>Меню администратора:</b>\", reply_markup=admin_menu(), parse_mode='HTML')",
        "detail": "app.apps.core.bot.routes.admin_router",
        "documentation": {}
    },
    {
        "label": "WebAppDataFilter",
        "kind": 6,
        "importPath": "app.apps.core.bot.routes.user_router",
        "description": "app.apps.core.bot.routes.user_router",
        "peekOfCode": "class WebAppDataFilter(Filter):\n    async def __call__(self, message: Message, **kwargs) -> Union[bool, Dict[str, Any]]:\n        return dict(web_app_data=message.web_app_data) if message.web_app_data else False\n# Хэндлер для обработки we_app_data\n@router.message(WebAppDataFilter())\nasync def web_app_data(message: Message, state: FSMContext):\n    data =  json.loads(message.web_app_data.data)\n    user = await UserRepository.find(id=message.from_user.id)\n    data['user'] = user\n    if(user.role==UserRole.ADMIN.value):",
        "detail": "app.apps.core.bot.routes.user_router",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.apps.core.bot.routes.user_router",
        "description": "app.apps.core.bot.routes.user_router",
        "peekOfCode": "router = Router()\nrouter.action_message(StartCommand, StartCommand.__call__,\n                      Command(commands=[\"start\"]))\nrouter.action_message(UserCommands, UserCommands.set_name,\n                      GetUsername.get_username)\nrouter.action_message(JobCommands, JobCommands.set_chat, F.chat_shared)\nclass WebAppDataFilter(Filter):\n    async def __call__(self, message: Message, **kwargs) -> Union[bool, Dict[str, Any]]:\n        return dict(web_app_data=message.web_app_data) if message.web_app_data else False\n# Хэндлер для обработки we_app_data",
        "detail": "app.apps.core.bot.routes.user_router",
        "documentation": {}
    },
    {
        "label": "ParsingRequest",
        "kind": 6,
        "importPath": "app.apps.core.bot.services.parsing.parsing_request",
        "description": "app.apps.core.bot.services.parsing.parsing_request",
        "peekOfCode": "class ParsingRequest:\n    def handle_keywords():\n        return\n    # def handle_request():\n    #     return\n    # def handle_keywords():\n    #     return\n    # def handle_keywords():\n    #     return",
        "detail": "app.apps.core.bot.services.parsing.parsing_request",
        "documentation": {}
    },
    {
        "label": "UserProfile",
        "kind": 6,
        "importPath": "app.apps.core.bot.services.user.profile",
        "description": "app.apps.core.bot.services.user.profile",
        "peekOfCode": "class UserProfile:\n    m = 1",
        "detail": "app.apps.core.bot.services.user.profile",
        "documentation": {}
    },
    {
        "label": "CanResponse",
        "kind": 6,
        "importPath": "app.apps.core.bot.services.can_response",
        "description": "app.apps.core.bot.services.can_response",
        "peekOfCode": "class CanResponse:\n    message: Message\n    async def remove_old_message_from_cache(self, key):\n        id = Redis().get(key)\n        if id:\n            try:\n                await self.force_delete_msg(self.message.chat.id, id)\n                return True\n            except (TelegramBadRequest):\n                return False",
        "detail": "app.apps.core.bot.services.can_response",
        "documentation": {}
    },
    {
        "label": "HasIogramEntites",
        "kind": 6,
        "importPath": "app.apps.core.bot.services.has_iogram_entities",
        "description": "app.apps.core.bot.services.has_iogram_entities",
        "peekOfCode": "class HasIogramEntites:\n    message: Message\n    state: FSMContext\n    message: Message\n    bot: Bot\n    chat: Chat\n    def set_message(self, message: Message):\n        self.message = message\n    def set_state(self, state: FSMContext):\n        self.state = state",
        "detail": "app.apps.core.bot.services.has_iogram_entities",
        "documentation": {}
    },
    {
        "label": "Messager",
        "kind": 6,
        "importPath": "app.apps.core.bot.services.messager",
        "description": "app.apps.core.bot.services.messager",
        "peekOfCode": "class Messager:\n    @staticmethod\n    def empty():\n        return Text('')\n    @staticmethod\n    def limit_chats(chats: list):\n        return as_list(\n            Bold(transl('info.max_count_chats_reached')),\n            Messager.get_chats_info(chats)\n        )",
        "detail": "app.apps.core.bot.services.messager",
        "documentation": {}
    },
    {
        "label": "Responder",
        "kind": 6,
        "importPath": "app.apps.core.bot.services.responder",
        "description": "app.apps.core.bot.services.responder",
        "peekOfCode": "class Responder:\n    message: Message\n    def __init__(self, entity: Bot | Message):\n        if isinstance(entity, Message):\n            self.message = entity\n            self.bot = entity.bot\n        else:\n            self.bot = entity\n    def get_content(self, content):\n        if isinstance(content, Text):",
        "detail": "app.apps.core.bot.services.responder",
        "documentation": {}
    },
    {
        "label": "Caller",
        "kind": 6,
        "importPath": "app.apps.core.bot.services.router",
        "description": "app.apps.core.bot.services.router",
        "peekOfCode": "class Caller:\n    controller_name = None\n    action = None\n    method_args = None\n    type = None\n    def load(self, type, c_name, action, *filters: CallbackType, m_args: dict = {}):\n        self.type = type\n        self.controller_name = c_name\n        self.action = action.__name__\n        self.method_args = m_args",
        "detail": "app.apps.core.bot.services.router",
        "documentation": {}
    },
    {
        "label": "Router",
        "kind": 6,
        "importPath": "app.apps.core.bot.services.router",
        "description": "app.apps.core.bot.services.router",
        "peekOfCode": "class Router(IoRouter):\n    iogram_router = IoRouter()\n    def register_callback(self, type, c_name, action, *filters: CallbackType, m_args: dict = {}):\n        call = Caller().load(\n            'message',\n            c_name,\n            action,\n            *filters,\n            m_args=m_args\n        ).get_call()",
        "detail": "app.apps.core.bot.services.router",
        "documentation": {}
    },
    {
        "label": "SearchStatus",
        "kind": 6,
        "importPath": "app.apps.core.bot.enum",
        "description": "app.apps.core.bot.enum",
        "peekOfCode": "class SearchStatus(Enum):\n    initial = 'В сбооре'\n    ready = 'Ожидает поиска'\n    in_process = 'В процессе'\n    error = 'Ошибка'\n    finished = 'Завершен'\nclass SearchType(Enum):\n    telegram_chats = 'Парсинг телеграмм чатов'\n    avito = 'Парсинг обьявлений Avito'\nclass UserRole(Enum):",
        "detail": "app.apps.core.bot.enum",
        "documentation": {}
    },
    {
        "label": "SearchType",
        "kind": 6,
        "importPath": "app.apps.core.bot.enum",
        "description": "app.apps.core.bot.enum",
        "peekOfCode": "class SearchType(Enum):\n    telegram_chats = 'Парсинг телеграмм чатов'\n    avito = 'Парсинг обьявлений Avito'\nclass UserRole(Enum):\n    ADMIN=\"admin\"\n    USER=\"user\"\n    WRITER=\"writer\"\n    REQUEST_WRITER=\"request_writer\"\nclass ReviewStatus(Enum):\n    APPROVED=\"approwed\"",
        "detail": "app.apps.core.bot.enum",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "kind": 6,
        "importPath": "app.apps.core.bot.enum",
        "description": "app.apps.core.bot.enum",
        "peekOfCode": "class UserRole(Enum):\n    ADMIN=\"admin\"\n    USER=\"user\"\n    WRITER=\"writer\"\n    REQUEST_WRITER=\"request_writer\"\nclass ReviewStatus(Enum):\n    APPROVED=\"approwed\"\n    REQUESTED=\"requested\"",
        "detail": "app.apps.core.bot.enum",
        "documentation": {}
    },
    {
        "label": "ReviewStatus",
        "kind": 6,
        "importPath": "app.apps.core.bot.enum",
        "description": "app.apps.core.bot.enum",
        "peekOfCode": "class ReviewStatus(Enum):\n    APPROVED=\"approwed\"\n    REQUESTED=\"requested\"",
        "detail": "app.apps.core.bot.enum",
        "documentation": {}
    },
    {
        "label": "UserCallbackData",
        "kind": 6,
        "importPath": "app.apps.core.bot.filters",
        "description": "app.apps.core.bot.filters",
        "peekOfCode": "class UserCallbackData(CallbackData, prefix='user'):\n    action: str\n    type: str | None = None\n    id: int | None = None\n    name: str | None = None\n    search_id: int | None = None\n    tariff_id: int | None = None\n    message_id: int | str | None = None\n    keywords: dict | None = None\nclass AdvancedModeCallbackData(CallbackData, prefix='advanced_mode'):",
        "detail": "app.apps.core.bot.filters",
        "documentation": {}
    },
    {
        "label": "AdvancedModeCallbackData",
        "kind": 6,
        "importPath": "app.apps.core.bot.filters",
        "description": "app.apps.core.bot.filters",
        "peekOfCode": "class AdvancedModeCallbackData(CallbackData, prefix='advanced_mode'):\n    action: str\n    type: str | None = None\n    id: int | None = None\n    message_id: int | str | None = None\n    api_id: str | None = None\n    api_hash: str | None = None\n    sms_code: str | None = None\nclass SearchCallbackData(CallbackData, prefix='user'):\n    action: str",
        "detail": "app.apps.core.bot.filters",
        "documentation": {}
    },
    {
        "label": "SearchCallbackData",
        "kind": 6,
        "importPath": "app.apps.core.bot.filters",
        "description": "app.apps.core.bot.filters",
        "peekOfCode": "class SearchCallbackData(CallbackData, prefix='user'):\n    action: str\n    id: int | None = None\n    search_id: int | None = None\n    tariff_id: int | None = None\n    chat_id: int | str | None = None\n    message_id: int | str | None = None\n    keyword_name: str | None = None\n    keywords_options: str | list | None = None",
        "detail": "app.apps.core.bot.filters",
        "documentation": {}
    },
    {
        "label": "messager",
        "kind": 2,
        "importPath": "app.apps.core.bot.helpers",
        "description": "app.apps.core.bot.helpers",
        "peekOfCode": "def messager(method: str = '', *args) -> Messager | Text:\n    if method and hasattr(Messager, method) and callable(func := getattr(Messager, method)):\n        return func(*args)\n    return Messager\nasync def answer(m: Message, text, *args):\n    return await Responder(m).answer(text, *args)\ndef get_chats_sending_id():\n    return random.randint(3, 5)\ndef get_debtor_info(iin):\n    api_key = '124ba359ba6745bf9d2c149a8dd0e273'",
        "detail": "app.apps.core.bot.helpers",
        "documentation": {}
    },
    {
        "label": "get_chats_sending_id",
        "kind": 2,
        "importPath": "app.apps.core.bot.helpers",
        "description": "app.apps.core.bot.helpers",
        "peekOfCode": "def get_chats_sending_id():\n    return random.randint(3, 5)\ndef get_debtor_info(iin):\n    api_key = '124ba359ba6745bf9d2c149a8dd0e273'\n    payload = f\"\"\"<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:soap=\"http://soap.opendata.egov.nitec.kz/\">\n        <soapenv:Header/>\n        <soapenv:Body>\n            <soap:request>\n            <request>\n                <requestInfo>",
        "detail": "app.apps.core.bot.helpers",
        "documentation": {}
    },
    {
        "label": "get_debtor_info",
        "kind": 2,
        "importPath": "app.apps.core.bot.helpers",
        "description": "app.apps.core.bot.helpers",
        "peekOfCode": "def get_debtor_info(iin):\n    api_key = '124ba359ba6745bf9d2c149a8dd0e273'\n    payload = f\"\"\"<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:soap=\"http://soap.opendata.egov.nitec.kz/\">\n        <soapenv:Header/>\n        <soapenv:Body>\n            <soap:request>\n            <request>\n                <requestInfo>\n                    <messageId>7355bcb8-fcbe-4f14-83b7-392a7a79945d</messageId>\n                    <messageDate>{datetime.datetime.now().strftime(\"%Y-%m-%dT%H:%M:%S+05:00\")}</messageDate>",
        "detail": "app.apps.core.bot.helpers",
        "documentation": {}
    },
    {
        "label": "route_middlewares",
        "kind": 5,
        "importPath": "app.apps.core.bot.middlewares_list",
        "description": "app.apps.core.bot.middlewares_list",
        "peekOfCode": "route_middlewares = (\n    HasTariffMiddleware,\n    MainMiddleware,\n    LanguageMiddleware\n)",
        "detail": "app.apps.core.bot.middlewares_list",
        "documentation": {}
    },
    {
        "label": "GetUsername",
        "kind": 6,
        "importPath": "app.apps.core.bot.states",
        "description": "app.apps.core.bot.states",
        "peekOfCode": "class GetUsername(StatesGroup):\n    get_username = State()\nclass WorkState(StatesGroup):\n    chats = State()\n    keywords = State()\n    doc = State()\nclass AdvancedModeState(StatesGroup):\n    api_id =State()\n    api_hash =State()\n    sms_code =State()",
        "detail": "app.apps.core.bot.states",
        "documentation": {}
    },
    {
        "label": "WorkState",
        "kind": 6,
        "importPath": "app.apps.core.bot.states",
        "description": "app.apps.core.bot.states",
        "peekOfCode": "class WorkState(StatesGroup):\n    chats = State()\n    keywords = State()\n    doc = State()\nclass AdvancedModeState(StatesGroup):\n    api_id =State()\n    api_hash =State()\n    sms_code =State()",
        "detail": "app.apps.core.bot.states",
        "documentation": {}
    },
    {
        "label": "AdvancedModeState",
        "kind": 6,
        "importPath": "app.apps.core.bot.states",
        "description": "app.apps.core.bot.states",
        "peekOfCode": "class AdvancedModeState(StatesGroup):\n    api_id =State()\n    api_hash =State()\n    sms_code =State()",
        "detail": "app.apps.core.bot.states",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "app.apps.core.management.commands.seed",
        "description": "app.apps.core.management.commands.seed",
        "peekOfCode": "class Command(BaseCommand):\n    help = 'Seed random test data into the database for another project'\n    def handle(self, *args, **options):\n        self.stdout.write(self.style.SUCCESS('Seeding data for another project...'))\n        # # Create Tariff Plans\n        # for _ in range(5):  # Adjust the number based on how many Tariff Plans you want\n        #     self.create_tariff_plan()\n        # Create Telegram Users and associated Search Lists\n        for _ in range(20):  # Adjust the number based on how many Telegram Users you want\n            user = self.create_telegram_user()",
        "detail": "app.apps.core.management.commands.seed",
        "documentation": {}
    },
    {
        "label": "fake",
        "kind": 5,
        "importPath": "app.apps.core.management.commands.seed",
        "description": "app.apps.core.management.commands.seed",
        "peekOfCode": "fake = Faker()\nclass Command(BaseCommand):\n    help = 'Seed random test data into the database for another project'\n    def handle(self, *args, **options):\n        self.stdout.write(self.style.SUCCESS('Seeding data for another project...'))\n        # # Create Tariff Plans\n        # for _ in range(5):  # Adjust the number based on how many Tariff Plans you want\n        #     self.create_tariff_plan()\n        # Create Telegram Users and associated Search Lists\n        for _ in range(20):  # Adjust the number based on how many Telegram Users you want",
        "detail": "app.apps.core.management.commands.seed",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.apps.core.migrations.0001_initial",
        "description": "app.apps.core.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='TariffPlan',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=500)),",
        "detail": "app.apps.core.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.apps.core.migrations.0002_alter_telegramuser_tariff_plan",
        "description": "app.apps.core.migrations.0002_alter_telegramuser_tariff_plan",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('core', '0001_initial'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='telegramuser',\n            name='tariff_plan',\n            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='telegram_user', to='core.tariffplan'),\n        ),",
        "detail": "app.apps.core.migrations.0002_alter_telegramuser_tariff_plan",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.apps.core.migrations.0003_telegramuser_is_accepted_rules",
        "description": "app.apps.core.migrations.0003_telegramuser_is_accepted_rules",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('core', '0002_alter_telegramuser_tariff_plan'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='telegramuser',\n            name='is_accepted_rules',\n            field=models.BooleanField(default=False),\n        ),",
        "detail": "app.apps.core.migrations.0003_telegramuser_is_accepted_rules",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.apps.core.migrations.0004_rename_expire_at_telegramuser_expired_at",
        "description": "app.apps.core.migrations.0004_rename_expire_at_telegramuser_expired_at",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('core', '0003_telegramuser_is_accepted_rules'),\n    ]\n    operations = [\n        migrations.RenameField(\n            model_name='telegramuser',\n            old_name='expire_at',\n            new_name='expired_at',\n        ),",
        "detail": "app.apps.core.migrations.0004_rename_expire_at_telegramuser_expired_at",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.apps.core.migrations.0005_search_delete_searchlist",
        "description": "app.apps.core.migrations.0005_search_delete_searchlist",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('core', '0004_rename_expire_at_telegramuser_expired_at'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Search',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('status', models.CharField(choices=[('initial', 'В сбооре'), ('ready', 'Ожидает поиска'), ('in_process', 'В процессе'), ('error', 'Ошибка'), ('finished', 'Завершен')], max_length=50)),",
        "detail": "app.apps.core.migrations.0005_search_delete_searchlist",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.apps.core.migrations.0006_telegramuser_telegram_id",
        "description": "app.apps.core.migrations.0006_telegramuser_telegram_id",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('core', '0005_search_delete_searchlist'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='telegramuser',\n            name='telegram_id',\n            field=models.CharField(blank=True, max_length=50, null=True),\n        ),",
        "detail": "app.apps.core.migrations.0006_telegramuser_telegram_id",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.apps.core.migrations.0007_search_created_at_alter_search_searched_at_and_more",
        "description": "app.apps.core.migrations.0007_search_created_at_alter_search_searched_at_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('core', '0006_telegramuser_telegram_id'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='search',\n            name='created_at',\n            field=models.DateTimeField(auto_now_add=True, default=django.utils.timezone.now),\n            preserve_default=False,",
        "detail": "app.apps.core.migrations.0007_search_created_at_alter_search_searched_at_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.apps.core.migrations.0008_tariffplan_is_default",
        "description": "app.apps.core.migrations.0008_tariffplan_is_default",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('core', '0007_search_created_at_alter_search_searched_at_and_more'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='tariffplan',\n            name='is_default',\n            field=models.BooleanField(default=False),\n        ),",
        "detail": "app.apps.core.migrations.0008_tariffplan_is_default",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.apps.core.migrations.0009_alter_tariffplan_name",
        "description": "app.apps.core.migrations.0009_alter_tariffplan_name",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('core', '0008_tariffplan_is_default'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='tariffplan',\n            name='name',\n            field=models.CharField(max_length=500, unique=True),\n        ),",
        "detail": "app.apps.core.migrations.0009_alter_tariffplan_name",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.apps.core.migrations.0010_alter_telegramuser_telegram_id",
        "description": "app.apps.core.migrations.0010_alter_telegramuser_telegram_id",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('core', '0009_alter_tariffplan_name'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='telegramuser',\n            name='telegram_id',\n            field=models.CharField(blank=True, max_length=50, null=True, unique=True),\n        ),",
        "detail": "app.apps.core.migrations.0010_alter_telegramuser_telegram_id",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.apps.core.migrations.0011_tariffplan_allowed_searches",
        "description": "app.apps.core.migrations.0011_tariffplan_allowed_searches",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('core', '0010_alter_telegramuser_telegram_id'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='tariffplan',\n            name='allowed_searches',\n            field=models.IntegerField(null=True),\n        ),",
        "detail": "app.apps.core.migrations.0011_tariffplan_allowed_searches",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.apps.core.migrations.0012_alter_search_id_alter_tariffplan_id_and_more",
        "description": "app.apps.core.migrations.0012_alter_search_id_alter_tariffplan_id_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('core', '0011_tariffplan_allowed_searches'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='search',\n            name='id',\n            field=models.AutoField(primary_key=True, serialize=False),\n        ),",
        "detail": "app.apps.core.migrations.0012_alter_search_id_alter_tariffplan_id_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.apps.core.migrations.0013_search_entity_chat_id_search_entity_message_id_and_more",
        "description": "app.apps.core.migrations.0013_search_entity_chat_id_search_entity_message_id_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('core', '0012_alter_search_id_alter_tariffplan_id_and_more'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='search',\n            name='entity_chat_id',\n            field=models.CharField(max_length=255, null=True),\n        ),",
        "detail": "app.apps.core.migrations.0013_search_entity_chat_id_search_entity_message_id_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.apps.core.migrations.0014_alter_search_groups_alter_search_keywords",
        "description": "app.apps.core.migrations.0014_alter_search_groups_alter_search_keywords",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('core', '0013_search_entity_chat_id_search_entity_message_id_and_more'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='search',\n            name='groups',\n            field=models.JSONField(),\n        ),",
        "detail": "app.apps.core.migrations.0014_alter_search_groups_alter_search_keywords",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.apps.core.migrations.0015_search_tariff_plan",
        "description": "app.apps.core.migrations.0015_search_tariff_plan",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('core', '0014_alter_search_groups_alter_search_keywords'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='search',\n            name='tariff_plan',\n            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='search_tariff', to='core.tariffplan'),\n        ),",
        "detail": "app.apps.core.migrations.0015_search_tariff_plan",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.apps.core.migrations.0016_rename_groups_search_searchable_search_search_type",
        "description": "app.apps.core.migrations.0016_rename_groups_search_searchable_search_search_type",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('core', '0015_search_tariff_plan'),\n    ]\n    operations = [\n        migrations.RenameField(\n            model_name='search',\n            old_name='groups',\n            new_name='searchable',\n        ),",
        "detail": "app.apps.core.migrations.0016_rename_groups_search_searchable_search_search_type",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.apps.core.migrations.0017_alter_search_searched_at",
        "description": "app.apps.core.migrations.0017_alter_search_searched_at",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('core', '0016_rename_groups_search_searchable_search_search_type'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='search',\n            name='searched_at',\n            field=models.DateTimeField(null=True),\n        ),",
        "detail": "app.apps.core.migrations.0017_alter_search_searched_at",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.apps.core.migrations.0018_searchtelegramuser_telegramchat_searchlead_and_more",
        "description": "app.apps.core.migrations.0018_searchtelegramuser_telegramchat_searchlead_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('core', '0017_alter_search_searched_at'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='SearchTelegramUser',\n            fields=[\n                ('id', models.AutoField(primary_key=True, serialize=False)),\n                ('telegram_id', models.CharField(max_length=50, null=True, unique=True)),",
        "detail": "app.apps.core.migrations.0018_searchtelegramuser_telegramchat_searchlead_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.apps.core.migrations.0019_rename_phone_number_searchtelegramuser_phone_and_more",
        "description": "app.apps.core.migrations.0019_rename_phone_number_searchtelegramuser_phone_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('core', '0018_searchtelegramuser_telegramchat_searchlead_and_more'),\n    ]\n    operations = [\n        migrations.RenameField(\n            model_name='searchtelegramuser',\n            old_name='phone_number',\n            new_name='phone',\n        ),",
        "detail": "app.apps.core.migrations.0019_rename_phone_number_searchtelegramuser_phone_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.apps.core.migrations.0020_alter_search_entity_search_id_alter_search_leads_and_more",
        "description": "app.apps.core.migrations.0020_alter_search_entity_search_id_alter_search_leads_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('core', '0019_rename_phone_number_searchtelegramuser_phone_and_more'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='search',\n            name='entity_search_id',\n            field=models.CharField(blank=True, max_length=255, null=True),\n        ),",
        "detail": "app.apps.core.migrations.0020_alter_search_entity_search_id_alter_search_leads_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.apps.core.migrations.0021_searchtelegramuser_auth_code",
        "description": "app.apps.core.migrations.0021_searchtelegramuser_auth_code",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('core', '0020_alter_search_entity_search_id_alter_search_leads_and_more'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='searchtelegramuser',\n            name='auth_code',\n            field=models.CharField(blank=True, max_length=50, null=True),\n        ),",
        "detail": "app.apps.core.migrations.0021_searchtelegramuser_auth_code",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.apps.core.migrations.0022_telegramuser_search_accounts",
        "description": "app.apps.core.migrations.0022_telegramuser_search_accounts",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('core', '0021_searchtelegramuser_auth_code'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='telegramuser',\n            name='search_accounts',\n            field=models.ManyToManyField(blank=True, null=True, to='core.searchtelegramuser'),\n        ),",
        "detail": "app.apps.core.migrations.0022_telegramuser_search_accounts",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.apps.core.migrations.0023_rename_is_accepted_rules_telegramuser_is_admin",
        "description": "app.apps.core.migrations.0023_rename_is_accepted_rules_telegramuser_is_admin",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"core\", \"0022_telegramuser_search_accounts\"),\n    ]\n    operations = [\n        migrations.RenameField(\n            model_name=\"telegramuser\",\n            old_name=\"is_accepted_rules\",\n            new_name=\"is_admin\",\n        ),",
        "detail": "app.apps.core.migrations.0023_rename_is_accepted_rules_telegramuser_is_admin",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.apps.core.migrations.0024_telegramuser_is_can_review",
        "description": "app.apps.core.migrations.0024_telegramuser_is_can_review",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"core\", \"0023_rename_is_accepted_rules_telegramuser_is_admin\"),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name=\"telegramuser\",\n            name=\"is_can_review\",\n            field=models.BooleanField(default=False),\n        ),",
        "detail": "app.apps.core.migrations.0024_telegramuser_is_can_review",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.apps.core.migrations.0025_remove_telegramuser_is_admin_and_more",
        "description": "app.apps.core.migrations.0025_remove_telegramuser_is_admin_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"core\", \"0024_telegramuser_is_can_review\"),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name=\"telegramuser\",\n            name=\"is_admin\",\n        ),\n        migrations.RemoveField(",
        "detail": "app.apps.core.migrations.0025_remove_telegramuser_is_admin_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.apps.core.migrations.0026_debtor",
        "description": "app.apps.core.migrations.0026_debtor",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"core\", \"0025_remove_telegramuser_is_admin_and_more\"),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name=\"Debtor\",\n            fields=[\n                (\"id\", models.AutoField(primary_key=True, serialize=False)),\n                (",
        "detail": "app.apps.core.migrations.0026_debtor",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.apps.core.migrations.0027_alter_debtor_text",
        "description": "app.apps.core.migrations.0027_alter_debtor_text",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"core\", \"0026_debtor\"),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name=\"debtor\",\n            name=\"text\",\n            field=models.CharField(blank=True, max_length=255, null=True, unique=True),\n        ),",
        "detail": "app.apps.core.migrations.0027_alter_debtor_text",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.apps.core.migrations.0028_debtor_user",
        "description": "app.apps.core.migrations.0028_debtor_user",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"core\", \"0027_alter_debtor_text\"),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name=\"debtor\",\n            name=\"user\",\n            field=models.ForeignKey(\n                null=True,",
        "detail": "app.apps.core.migrations.0028_debtor_user",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.apps.core.migrations.0029_debtor_status_alter_debtor_firstanme_and_more",
        "description": "app.apps.core.migrations.0029_debtor_status_alter_debtor_firstanme_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"core\", \"0028_debtor_user\"),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name=\"debtor\",\n            name=\"status\",\n            field=models.CharField(\n                default=app.apps.core.bot.enum.ReviewStatus[\"REQUESTED\"], max_length=50",
        "detail": "app.apps.core.migrations.0029_debtor_status_alter_debtor_firstanme_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.apps.core.migrations.0030_rename_firstanme_debtor_firstname",
        "description": "app.apps.core.migrations.0030_rename_firstanme_debtor_firstname",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"core\", \"0029_debtor_status_alter_debtor_firstanme_and_more\"),\n    ]\n    operations = [\n        migrations.RenameField(\n            model_name=\"debtor\",\n            old_name=\"firstanme\",\n            new_name=\"firstname\",\n        ),",
        "detail": "app.apps.core.migrations.0030_rename_firstanme_debtor_firstname",
        "documentation": {}
    },
    {
        "label": "BaseRepository",
        "kind": 6,
        "importPath": "app.apps.core.repositories.base",
        "description": "app.apps.core.repositories.base",
        "peekOfCode": "class BaseRepository:\n    def to_list(self, sql):\n        return [item for item in sql]",
        "detail": "app.apps.core.repositories.base",
        "documentation": {}
    },
    {
        "label": "DebtorRepository",
        "kind": 6,
        "importPath": "app.apps.core.repositories.debtor_repository",
        "description": "app.apps.core.repositories.debtor_repository",
        "peekOfCode": "class DebtorRepository:\n    @sync_to_async\n    def create(self: None, data: dict) -> tuple[Debtor, bool]:\n        deb = Debtor.objects.create(\n            iin_or_bin=data['iin'],\n            firstname=data['firstname'],\n            lastname=data['lastname'],\n            text=data['review_text'],\n            user=data['user'],\n            status = data['status'] if 'status' in data else ReviewStatus.REQUESTED",
        "detail": "app.apps.core.repositories.debtor_repository",
        "documentation": {}
    },
    {
        "label": "SearchRepository",
        "kind": 6,
        "importPath": "app.apps.core.repositories.search_repository",
        "description": "app.apps.core.repositories.search_repository",
        "peekOfCode": "class SearchRepository(BaseRepository):\n    @sync_to_async\n    def save(self: None, data: SearchDto) -> Search:\n        return Search.objects.get_or_create(\n            telegram_id=data['telegram_id'],\n            telegram_username=data['telegram_username'],\n            telegram_name=data['telegram_name'],\n        )\n    @sync_to_async\n    def store(self: None, data: SearchDto) -> Search:",
        "detail": "app.apps.core.repositories.search_repository",
        "documentation": {}
    },
    {
        "label": "SearchTelehramUserRepository",
        "kind": 6,
        "importPath": "app.apps.core.repositories.search_telegram_user",
        "description": "app.apps.core.repositories.search_telegram_user",
        "peekOfCode": "class SearchTelehramUserRepository(BaseRepository):\n    @sync_to_async\n    def get(self: None, **filters) -> SearchTelegramUser:\n        return super().to_list(SearchTelegramUser.objects.filter(**filters).all())\n    @sync_to_async\n    def findFree(with_dto=True, **filters):\n        user = SearchTelegramUser.objects.filter(\n            **(filters | {'is_free': True})).first()\n        if with_dto:\n            return SearchTelegramAccount(user)",
        "detail": "app.apps.core.repositories.search_telegram_user",
        "documentation": {}
    },
    {
        "label": "colors",
        "kind": 5,
        "importPath": "app.apps.core.repositories.search_telegram_user",
        "description": "app.apps.core.repositories.search_telegram_user",
        "peekOfCode": "colors = {\n    'yellow': 'желтый',\n    'red': 'красный',\n    'black': 'черный',\n}\nclass SearchTelehramUserRepository(BaseRepository):\n    @sync_to_async\n    def get(self: None, **filters) -> SearchTelegramUser:\n        return super().to_list(SearchTelegramUser.objects.filter(**filters).all())\n    @sync_to_async",
        "detail": "app.apps.core.repositories.search_telegram_user",
        "documentation": {}
    },
    {
        "label": "TariffRepository",
        "kind": 6,
        "importPath": "app.apps.core.repositories.tariff_repository",
        "description": "app.apps.core.repositories.tariff_repository",
        "peekOfCode": "class TariffRepository:\n    @sync_to_async\n    def save(self: None, data: dict) -> tuple[TariffPlan, bool]:\n        return TariffPlan.objects.create(\n            name=data['name'],\n            group_quantity=data['group_quantity'],\n            keyword_quantity=data['keyword_quantity'],\n            old_messages_offset=data['old_messages_offset'],\n            daemon_hours_quantity=data['daemon_hours_quantity']\n        )",
        "detail": "app.apps.core.repositories.tariff_repository",
        "documentation": {}
    },
    {
        "label": "TelegramAccountsRepository",
        "kind": 6,
        "importPath": "app.apps.core.repositories.telegram_accounts_repository",
        "description": "app.apps.core.repositories.telegram_accounts_repository",
        "peekOfCode": "class TelegramAccountsRepository:\n    def get_free_account() -> SearchTelegramAccount:\n        pass",
        "detail": "app.apps.core.repositories.telegram_accounts_repository",
        "documentation": {}
    },
    {
        "label": "UserRepository",
        "kind": 6,
        "importPath": "app.apps.core.repositories.user_repository",
        "description": "app.apps.core.repositories.user_repository",
        "peekOfCode": "class UserRepository:\n    message: Message\n    @sync_to_async\n    def save(self: None, data: dict) -> tuple[TelegramUser, bool]:\n        return TelegramUser.objects.get_or_create(\n            telegram_id=data['telegram_id'],\n            telegram_username=data['telegram_username'],\n            telegram_name=data['telegram_name'],\n        )\n    @sync_to_async",
        "detail": "app.apps.core.repositories.user_repository",
        "documentation": {}
    },
    {
        "label": "DTO",
        "kind": 6,
        "importPath": "app.apps.core.DTO",
        "description": "app.apps.core.DTO",
        "peekOfCode": "class DTO(HasAttributes):\n    def __init__(self, data: dict | Model| None):\n        if isinstance(data, Model):\n            data = data.__dict__\n        if(data):\n            self.set_attributes(data)\n    def to_json(self):\n        return json.dumps(self.to_dict())\n    def to_dict(self):\n        dict = self.__dict__",
        "detail": "app.apps.core.DTO",
        "documentation": {}
    },
    {
        "label": "TariffDto",
        "kind": 6,
        "importPath": "app.apps.core.DTO",
        "description": "app.apps.core.DTO",
        "peekOfCode": "class TariffDto(DTO):\n    id: int | str = None\n    name = None\n    group_quantity = 0\n    keyword_quantity = 0\n    daemon_hours_quantity = 0\n    allowed_searches = 0\n    is_expired = 0\nclass KeywordsDto(DTO):\n    name: str = None",
        "detail": "app.apps.core.DTO",
        "documentation": {}
    },
    {
        "label": "KeywordsDto",
        "kind": 6,
        "importPath": "app.apps.core.DTO",
        "description": "app.apps.core.DTO",
        "peekOfCode": "class KeywordsDto(DTO):\n    name: str = None\n    options: list = []\nclass SearchDto(DTO):\n    id: int | str | None = None\n    entity_message_id: str | int | None = None\n    entity_chat_id: str | int | None = None\n    entity_search_id: str | int | None = None\n    status: str = 'initial'\n    user: TelegramUser | None = None",
        "detail": "app.apps.core.DTO",
        "documentation": {}
    },
    {
        "label": "SearchDto",
        "kind": 6,
        "importPath": "app.apps.core.DTO",
        "description": "app.apps.core.DTO",
        "peekOfCode": "class SearchDto(DTO):\n    id: int | str | None = None\n    entity_message_id: str | int | None = None\n    entity_chat_id: str | int | None = None\n    entity_search_id: str | int | None = None\n    status: str = 'initial'\n    user: TelegramUser | None = None\n    keywords: KeywordsDto | None = None\n    chats: List[str] = []\n    tariff_plan: TariffPlan|TariffDto  = None",
        "detail": "app.apps.core.DTO",
        "documentation": {}
    },
    {
        "label": "TelegramInfoDto",
        "kind": 6,
        "importPath": "app.apps.core.DTO",
        "description": "app.apps.core.DTO",
        "peekOfCode": "class TelegramInfoDto(DTO):\n    content = None\n    chat_id: str | int | None = None\n    msg_id: str | int | None = None\n    @staticmethod\n    def multiparse(searches: List[Search], text):\n        return [\n                TelegramInfoDto({\n                    'content': text,\n                    'chat_id': search.entity_chat_id,",
        "detail": "app.apps.core.DTO",
        "documentation": {}
    },
    {
        "label": {
            "name": "",
            "kind": 6,
            "peekOfCode": "class  HandledSearch(DTO):\n    content = None\n    chat_id: str | int | None = None\n    msg_id: str | int | None = None\n    @staticmethod\n    def multiparse(searches: List[Search], text):\n        return [\n                HandledSearch({\n                    'content': text,\n                    'chat_id': search.entity_chat_id,"
        },
        "kind": 6,
        "importPath": "app.apps.core.DTO",
        "description": "app.apps.core.DTO",
        "peekOfCode": "class  HandledSearch(DTO):\n    content = None\n    chat_id: str | int | None = None\n    msg_id: str | int | None = None\n    @staticmethod\n    def multiparse(searches: List[Search], text):\n        return [\n                HandledSearch({\n                    'content': text,\n                    'chat_id': search.entity_chat_id,",
        "detail": "app.apps.core.DTO",
        "documentation": {}
    },
    {
        "label": {
            "name": "",
            "kind": 6,
            "peekOfCode": "class  SearchTelegramAccount(DTO):\n    username:str = None\n    password:str = None\n    phone:str = None\n    api_id = None\n    api_hash = None\n    bot_token = None\nclass SearchLead(DTO):\n    name:str = None\n    keywords=List[str]"
        },
        "kind": 6,
        "importPath": "app.apps.core.DTO",
        "description": "app.apps.core.DTO",
        "peekOfCode": "class  SearchTelegramAccount(DTO):\n    username:str = None\n    password:str = None\n    phone:str = None\n    api_id = None\n    api_hash = None\n    bot_token = None\nclass SearchLead(DTO):\n    name:str = None\n    keywords=List[str]",
        "detail": "app.apps.core.DTO",
        "documentation": {}
    },
    {
        "label": "SearchLead",
        "kind": 6,
        "importPath": "app.apps.core.DTO",
        "description": "app.apps.core.DTO",
        "peekOfCode": "class SearchLead(DTO):\n    name:str = None\n    keywords=List[str]\nclass SearchOrderDTO(DTO):\n    keywords: List[str] = None\n    leads: List[SearchLead] = None\n    user: TelegramUser | None = None\nclass ChatsWithOrdersDto(DTO):\n    chat_id:str|int = None\n    orders:List[SearchOrderDTO] = None",
        "detail": "app.apps.core.DTO",
        "documentation": {}
    },
    {
        "label": "SearchOrderDTO",
        "kind": 6,
        "importPath": "app.apps.core.DTO",
        "description": "app.apps.core.DTO",
        "peekOfCode": "class SearchOrderDTO(DTO):\n    keywords: List[str] = None\n    leads: List[SearchLead] = None\n    user: TelegramUser | None = None\nclass ChatsWithOrdersDto(DTO):\n    chat_id:str|int = None\n    orders:List[SearchOrderDTO] = None\nclass DebtorSearchState(StatesGroup):\n    iin = State()\nclass DebtorState(StatesGroup):",
        "detail": "app.apps.core.DTO",
        "documentation": {}
    },
    {
        "label": "ChatsWithOrdersDto",
        "kind": 6,
        "importPath": "app.apps.core.DTO",
        "description": "app.apps.core.DTO",
        "peekOfCode": "class ChatsWithOrdersDto(DTO):\n    chat_id:str|int = None\n    orders:List[SearchOrderDTO] = None\nclass DebtorSearchState(StatesGroup):\n    iin = State()\nclass DebtorState(StatesGroup):\n    msg_id = State()\n    text = State()",
        "detail": "app.apps.core.DTO",
        "documentation": {}
    },
    {
        "label": "DebtorSearchState",
        "kind": 6,
        "importPath": "app.apps.core.DTO",
        "description": "app.apps.core.DTO",
        "peekOfCode": "class DebtorSearchState(StatesGroup):\n    iin = State()\nclass DebtorState(StatesGroup):\n    msg_id = State()\n    text = State()",
        "detail": "app.apps.core.DTO",
        "documentation": {}
    },
    {
        "label": "DebtorState",
        "kind": 6,
        "importPath": "app.apps.core.DTO",
        "description": "app.apps.core.DTO",
        "peekOfCode": "class DebtorState(StatesGroup):\n    msg_id = State()\n    text = State()",
        "detail": "app.apps.core.DTO",
        "documentation": {}
    },
    {
        "label": "DemoConfig",
        "kind": 6,
        "importPath": "app.apps.core.apps",
        "description": "app.apps.core.apps",
        "peekOfCode": "class DemoConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"app.apps.core\"\n    def ready(self) -> None:\n        # Without this import, admin panel will not include this app\n        from app.apps.core.web import admin  # noqa: F401 (unused-import)",
        "detail": "app.apps.core.apps",
        "documentation": {}
    },
    {
        "label": "TariffPlan",
        "kind": 6,
        "importPath": "app.apps.core.models",
        "description": "app.apps.core.models",
        "peekOfCode": "class TariffPlan(models.Model):\n    id=models.AutoField(primary_key=True)\n    name = models.CharField(max_length=500, unique=True)\n    is_default = models.BooleanField(default=False)\n    group_quantity = models.IntegerField()\n    keyword_quantity = models.IntegerField()\n    old_messages_offset = models.IntegerField()\n    daemon_hours_quantity = models.IntegerField()\n    allowed_searches = models.IntegerField(null=True)\n    created_at = models.DateTimeField(auto_now_add=True)",
        "detail": "app.apps.core.models",
        "documentation": {}
    },
    {
        "label": "SearchTelegramUser",
        "kind": 6,
        "importPath": "app.apps.core.models",
        "description": "app.apps.core.models",
        "peekOfCode": "class SearchTelegramUser(models.Model):\n    id=models.AutoField(primary_key=True)\n    telegram_id = models.CharField(max_length=50,  blank=True, null=True, unique=True)\n    api_id = models.CharField(max_length=255, blank=True, null=True)\n    api_hash = models.CharField(max_length=255,  blank=True,null=True)\n    bot_token =  models.CharField(max_length=255,  blank=True,null=True)\n    phone = models.CharField(max_length=50, blank=True, null=True)\n    username = models.CharField(max_length=80,blank=True)\n    password = models.CharField(max_length=50, blank=True, null=True)\n    auth_code=models.CharField(max_length=50, blank=True, null=True)",
        "detail": "app.apps.core.models",
        "documentation": {}
    },
    {
        "label": "TelegramChat",
        "kind": 6,
        "importPath": "app.apps.core.models",
        "description": "app.apps.core.models",
        "peekOfCode": "class TelegramChat(models.Model):\n    id=models.AutoField(primary_key=True)\n    subscribers = models.ManyToManyField(SearchTelegramUser)\n    telegram_id = models.CharField(max_length=50, blank=True, null=True, unique=True)\n    name = models.CharField(max_length=50, blank=True, null=True)\n    status = models.CharField(max_length=50, blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    class Meta:\n        ordering = [\"telegram_id\"]\nclass SearchLead(models.Model):",
        "detail": "app.apps.core.models",
        "documentation": {}
    },
    {
        "label": "SearchLead",
        "kind": 6,
        "importPath": "app.apps.core.models",
        "description": "app.apps.core.models",
        "peekOfCode": "class SearchLead(models.Model):\n    id=models.AutoField(primary_key=True)\n    name=models.CharField(max_length=80,blank=True)\n    keywords=models.JSONField()\n    chats = models.ManyToManyField(TelegramChat, null=True)\nclass TelegramUser(models.Model):\n    id=models.AutoField(primary_key=True)\n    search_accounts= models.ManyToManyField(SearchTelegramUser, blank=True, null=True)\n    telegram_username = models.CharField(max_length=80)\n    telegram_id = models.CharField(max_length=50, blank=True, null=True, unique=True)",
        "detail": "app.apps.core.models",
        "documentation": {}
    },
    {
        "label": "TelegramUser",
        "kind": 6,
        "importPath": "app.apps.core.models",
        "description": "app.apps.core.models",
        "peekOfCode": "class TelegramUser(models.Model):\n    id=models.AutoField(primary_key=True)\n    search_accounts= models.ManyToManyField(SearchTelegramUser, blank=True, null=True)\n    telegram_username = models.CharField(max_length=80)\n    telegram_id = models.CharField(max_length=50, blank=True, null=True, unique=True)\n    telegram_name = models.CharField(max_length=50, blank=True, null=True)\n    phone_number = models.CharField(max_length=50, blank=True, null=True)\n    role = models.CharField(max_length=50, blank=True, default=UserRole.USER.value)\n    tariff_plan = models.ForeignKey(\n        TariffPlan, on_delete=models.SET_NULL, null=True, blank=True, related_name='telegram_user')",
        "detail": "app.apps.core.models",
        "documentation": {}
    },
    {
        "label": "Debtor",
        "kind": 6,
        "importPath": "app.apps.core.models",
        "description": "app.apps.core.models",
        "peekOfCode": "class Debtor(models.Model):\n    id=models.AutoField(primary_key=True)\n    user = models.ForeignKey(TelegramUser, on_delete=models.CASCADE, null=True)\n    status = models.CharField(max_length=50,  default=ReviewStatus.REQUESTED) \n    iin_or_bin = models.CharField(max_length=50,  blank=True, null=True, )\n    firstname = models.CharField(max_length=50,  blank=True, null=True, )\n    lastname = models.CharField(max_length=50,  blank=True, null=True, )\n    text = models.CharField(max_length=255,  blank=True, null=True, )\nclass Search(models.Model):\n    SEARCH_STATUSES = (",
        "detail": "app.apps.core.models",
        "documentation": {}
    },
    {
        "label": "Search",
        "kind": 6,
        "importPath": "app.apps.core.models",
        "description": "app.apps.core.models",
        "peekOfCode": "class Search(models.Model):\n    SEARCH_STATUSES = (\n        ('initial', 'В сбооре'),\n        ('ready', 'Ожидает поиска'),\n        ('in_process', 'В процессе'),\n        ('error', 'Ошибка'),\n        ('finished', 'Завершен'),\n    )\n    leads = models.ManyToManyField(SearchLead, blank=True)\n    id=models.AutoField(primary_key=True)",
        "detail": "app.apps.core.models",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "app.config.application",
        "description": "app.config.application",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent.parent\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = env(\"DEBUG\", cast=bool, default=False)\n# Internationalization\n# https://docs.djangoproject.com/en/4.0/topics/i18n/\nLANGUAGE_CODE = env(\"LANGUAGE_CODE\", cast=str, default=\"en-us\")\nTIME_ZONE = env(\"TIME_ZONE\", cast=str, default=\"UTC\")\nUSE_I18N = env(\"USE_I18N\", cast=bool, default=True)\nUSE_TZ = env(\"USE_TZ\", cast=bool, default=True)\n# Default primary key field type",
        "detail": "app.config.application",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "app.config.application",
        "description": "app.config.application",
        "peekOfCode": "DEBUG = env(\"DEBUG\", cast=bool, default=False)\n# Internationalization\n# https://docs.djangoproject.com/en/4.0/topics/i18n/\nLANGUAGE_CODE = env(\"LANGUAGE_CODE\", cast=str, default=\"en-us\")\nTIME_ZONE = env(\"TIME_ZONE\", cast=str, default=\"UTC\")\nUSE_I18N = env(\"USE_I18N\", cast=bool, default=True)\nUSE_TZ = env(\"USE_TZ\", cast=bool, default=True)\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "app.config.application",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "app.config.application",
        "description": "app.config.application",
        "peekOfCode": "LANGUAGE_CODE = env(\"LANGUAGE_CODE\", cast=str, default=\"en-us\")\nTIME_ZONE = env(\"TIME_ZONE\", cast=str, default=\"UTC\")\nUSE_I18N = env(\"USE_I18N\", cast=bool, default=True)\nUSE_TZ = env(\"USE_TZ\", cast=bool, default=True)\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "app.config.application",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "app.config.application",
        "description": "app.config.application",
        "peekOfCode": "TIME_ZONE = env(\"TIME_ZONE\", cast=str, default=\"UTC\")\nUSE_I18N = env(\"USE_I18N\", cast=bool, default=True)\nUSE_TZ = env(\"USE_TZ\", cast=bool, default=True)\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "app.config.application",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "app.config.application",
        "description": "app.config.application",
        "peekOfCode": "USE_I18N = env(\"USE_I18N\", cast=bool, default=True)\nUSE_TZ = env(\"USE_TZ\", cast=bool, default=True)\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "app.config.application",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "app.config.application",
        "description": "app.config.application",
        "peekOfCode": "USE_TZ = env(\"USE_TZ\", cast=bool, default=True)\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "app.config.application",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "app.config.application",
        "description": "app.config.application",
        "peekOfCode": "DEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "app.config.application",
        "documentation": {}
    },
    {
        "label": "RunningMode",
        "kind": 6,
        "importPath": "app.config.bot",
        "description": "app.config.bot",
        "peekOfCode": "class RunningMode(str, Enum):\n    LONG_POLLING = \"LONG_POLLING\"\n    WEBHOOK = \"WEBHOOK\"\nTG_TOKEN = env(\"TG_TOKEN\", cast=str)\nRUNNING_MODE = env(\"RUNNING_MODE\", cast=RunningMode, default=RunningMode.LONG_POLLING)\nWEBHOOK_URL = env(\"WEBHOOK_URL\", cast=str, default=\"\")",
        "detail": "app.config.bot",
        "documentation": {}
    },
    {
        "label": "TG_TOKEN",
        "kind": 5,
        "importPath": "app.config.bot",
        "description": "app.config.bot",
        "peekOfCode": "TG_TOKEN = env(\"TG_TOKEN\", cast=str)\nRUNNING_MODE = env(\"RUNNING_MODE\", cast=RunningMode, default=RunningMode.LONG_POLLING)\nWEBHOOK_URL = env(\"WEBHOOK_URL\", cast=str, default=\"\")",
        "detail": "app.config.bot",
        "documentation": {}
    },
    {
        "label": "RUNNING_MODE",
        "kind": 5,
        "importPath": "app.config.bot",
        "description": "app.config.bot",
        "peekOfCode": "RUNNING_MODE = env(\"RUNNING_MODE\", cast=RunningMode, default=RunningMode.LONG_POLLING)\nWEBHOOK_URL = env(\"WEBHOOK_URL\", cast=str, default=\"\")",
        "detail": "app.config.bot",
        "documentation": {}
    },
    {
        "label": "WEBHOOK_URL",
        "kind": 5,
        "importPath": "app.config.bot",
        "description": "app.config.bot",
        "peekOfCode": "WEBHOOK_URL = env(\"WEBHOOK_URL\", cast=str, default=\"\")",
        "detail": "app.config.bot",
        "documentation": {}
    },
    {
        "label": "DATABASE_URL",
        "kind": 5,
        "importPath": "app.config.database",
        "description": "app.config.database",
        "peekOfCode": "DATABASE_URL = env(\"DATABASE_URL\", cast=str, default=\"sqlite:///db.sqlite3\")\nCONN_MAX_AGE = env(\"CONN_MAX_AGE\", cast=int, default=6000)\nDATABASES = {\n    \"default\": dj_database_url.parse(DATABASE_URL, conn_max_age=CONN_MAX_AGE),\n}",
        "detail": "app.config.database",
        "documentation": {}
    },
    {
        "label": "CONN_MAX_AGE",
        "kind": 5,
        "importPath": "app.config.database",
        "description": "app.config.database",
        "peekOfCode": "CONN_MAX_AGE = env(\"CONN_MAX_AGE\", cast=int, default=6000)\nDATABASES = {\n    \"default\": dj_database_url.parse(DATABASE_URL, conn_max_age=CONN_MAX_AGE),\n}",
        "detail": "app.config.database",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "app.config.database",
        "description": "app.config.database",
        "peekOfCode": "DATABASES = {\n    \"default\": dj_database_url.parse(DATABASE_URL, conn_max_age=CONN_MAX_AGE),\n}",
        "detail": "app.config.database",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "app.config.web",
        "description": "app.config.web",
        "peekOfCode": "SECRET_KEY = env(\n    \"SECRET_KEY\",\n    cast=str,\n    default=\"django-insecure-2cb-!o^00(qos7$0wf@$ai#h9!^(ov7w6cj%#0ui;o=ulo!83!\",\n)\nALLOWED_HOSTS = list(env(\"ALLOWED_HOSTS\", cast=CommaSeparatedStrings, default=[]))\nMIDDLEWARE = [\n    \"django.middleware.security.SecurityMiddleware\",\n    \"django.contrib.sessions.middleware.SessionMiddleware\",\n    \"django.middleware.common.CommonMiddleware\",",
        "detail": "app.config.web",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "app.config.web",
        "description": "app.config.web",
        "peekOfCode": "ALLOWED_HOSTS = list(env(\"ALLOWED_HOSTS\", cast=CommaSeparatedStrings, default=[]))\nMIDDLEWARE = [\n    \"django.middleware.security.SecurityMiddleware\",\n    \"django.contrib.sessions.middleware.SessionMiddleware\",\n    \"django.middleware.common.CommonMiddleware\",\n    \"django.middleware.csrf.CsrfViewMiddleware\",\n    \"django.contrib.auth.middleware.AuthenticationMiddleware\",\n    \"django.contrib.messages.middleware.MessageMiddleware\",\n    \"django.middleware.clickjacking.XFrameOptionsMiddleware\",\n]",
        "detail": "app.config.web",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "app.config.web",
        "description": "app.config.web",
        "peekOfCode": "MIDDLEWARE = [\n    \"django.middleware.security.SecurityMiddleware\",\n    \"django.contrib.sessions.middleware.SessionMiddleware\",\n    \"django.middleware.common.CommonMiddleware\",\n    \"django.middleware.csrf.CsrfViewMiddleware\",\n    \"django.contrib.auth.middleware.AuthenticationMiddleware\",\n    \"django.contrib.messages.middleware.MessageMiddleware\",\n    \"django.middleware.clickjacking.XFrameOptionsMiddleware\",\n]\nROOT_URLCONF = \"app.delivery.web.urls\"",
        "detail": "app.config.web",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "app.config.web",
        "description": "app.config.web",
        "peekOfCode": "ROOT_URLCONF = \"app.delivery.web.urls\"\nTEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",",
        "detail": "app.config.web",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "app.config.web",
        "description": "app.config.web",
        "peekOfCode": "TEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",\n                \"django.contrib.auth.context_processors.auth\",",
        "detail": "app.config.web",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "app.config.web",
        "description": "app.config.web",
        "peekOfCode": "WSGI_APPLICATION = \"app.delivery.web.wsgi.application\"\n# Password validation\n# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.UserAttributeSimilarityValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.MinimumLengthValidator\",\n    },",
        "detail": "app.config.web",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "app.config.web",
        "description": "app.config.web",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.UserAttributeSimilarityValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.MinimumLengthValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.CommonPasswordValidator\",\n    },",
        "detail": "app.config.web",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "app.config.web",
        "description": "app.config.web",
        "peekOfCode": "STATIC_URL = \"static/\"\nSTATIC_ROOT = BASE_DIR / \"static\"",
        "detail": "app.config.web",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "app.config.web",
        "description": "app.config.web",
        "peekOfCode": "STATIC_ROOT = BASE_DIR / \"static\"",
        "detail": "app.config.web",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "app.delivery.web.asgi",
        "description": "app.delivery.web.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "app.delivery.web.asgi",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "app.delivery.web.wsgi",
        "description": "app.delivery.web.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "app.delivery.web.wsgi",
        "documentation": {}
    },
    {
        "label": "TelegramInformator",
        "kind": 6,
        "importPath": "app.services.search_services.info.telegram_informator",
        "description": "app.services.search_services.info.telegram_informator",
        "peekOfCode": "class TelegramInformator(BaseClient):\n    bot: Bot\n    def __init__(self) -> None:\n        session = AiohttpSession()\n        self.bot = Bot(token=TG_TOKEN, session=session)\n    async def close_connection(self):\n        await self.bot.session.close()\n    async def info(self, searches: List[Search] | List[InfoDto], text: str | None):\n        if not searches or len(searches) < 1:\n            # TODO Error Logging",
        "detail": "app.services.search_services.info.telegram_informator",
        "documentation": {}
    },
    {
        "label": "TelegramChatsParser",
        "kind": 6,
        "importPath": "app.services.search_services.parsers.telegram_chats_parser",
        "description": "app.services.search_services.parsers.telegram_chats_parser",
        "peekOfCode": "class TelegramChatsParser(HasSearchEntities):\n    async def scan_chats_and_parse_leads(self, chats_orders:List[ChatsWithOrdersDto]):\n        result  = []\n        for chat in chats_orders:\n            pass\n        return []",
        "detail": "app.services.search_services.parsers.telegram_chats_parser",
        "documentation": {}
    },
    {
        "label": "BaseClient",
        "kind": 6,
        "importPath": "app.services.search_services.base",
        "description": "app.services.search_services.base",
        "peekOfCode": "class BaseClient:\n    pass\nclass HasSearchEntities(HasAttributes):\n    telegram_client: TelegramClient = None\n    searches:List[Search]| List[SearchDto] = None\n    def __init__(self, **args) -> None:\n        self.set_attributes(args)",
        "detail": "app.services.search_services.base",
        "documentation": {}
    },
    {
        "label": "HasSearchEntities",
        "kind": 6,
        "importPath": "app.services.search_services.base",
        "description": "app.services.search_services.base",
        "peekOfCode": "class HasSearchEntities(HasAttributes):\n    telegram_client: TelegramClient = None\n    searches:List[Search]| List[SearchDto] = None\n    def __init__(self, **args) -> None:\n        self.set_attributes(args)",
        "detail": "app.services.search_services.base",
        "documentation": {}
    },
    {
        "label": "EntitiesMaker",
        "kind": 6,
        "importPath": "app.services.search_services.entites_maker",
        "description": "app.services.search_services.entites_maker",
        "peekOfCode": "class EntitiesMaker:\n    @sync_to_async\n    def make_unique_chats_with_orders(self: None, searches: List[Search]):\n        result: List[ChatsWithOrdersDto] = []\n        def is_unique_user(result: List[ChatsWithOrdersDto], chat_id, user: TelegramUser):\n            return not any(\n                order.user.id == user.id for chat in result\n                if chat.chat_id == chat_id for order in chat.orders\n            )\n        def is_unique_chat(result: List[ChatsWithOrdersDto], searchable):",
        "detail": "app.services.search_services.entites_maker",
        "documentation": {}
    },
    {
        "label": "TelegramSearchService",
        "kind": 6,
        "importPath": "app.services.search_services.telegram",
        "description": "app.services.search_services.telegram",
        "peekOfCode": "class TelegramSearchService(HasSearchEntities):\n    informator = TelegramInformator()\n    chat_parser:TelegramChatsParser\n    async def scan_chats_and_get_info(self):\n       return  self.chat_parser.scan_chats_and_parse_leads()      \n    def init_other_services(self):\n        pass        \n    def __init__(self, searches: List[Search]) -> None:\n        self.set_attributes({'searches': searches})\n    async def handle(self):",
        "detail": "app.services.search_services.telegram",
        "documentation": {}
    },
    {
        "label": "TelegramWalker",
        "kind": 6,
        "importPath": "app.services.search_services.telegram_walker",
        "description": "app.services.search_services.telegram_walker",
        "peekOfCode": "class TelegramWalker:\n    def __init__(self) -> None:\n       pass\n    async def parse_messages():\n        pass\n    async def subscribe_to_chat(self):\n        pass \n    # @telegram_iteration()\n    async def get_chat_info(self, client:TelegramClient, chat_id):\n        return False",
        "detail": "app.services.search_services.telegram_walker",
        "documentation": {}
    },
    {
        "label": "ErrorLogger",
        "kind": 6,
        "importPath": "app.services.error_logger",
        "description": "app.services.error_logger",
        "peekOfCode": "class ErrorLogger:\n    def log():\n        pass",
        "detail": "app.services.error_logger",
        "documentation": {}
    },
    {
        "label": "HasAttributes",
        "kind": 6,
        "importPath": "app.services.has_attributes",
        "description": "app.services.has_attributes",
        "peekOfCode": "class HasAttributes:\n    def set_attributes(self, data: dict):\n        for key, value in data.items():\n            if (hasattr(self, key)):\n                setattr(self, key, value)",
        "detail": "app.services.has_attributes",
        "documentation": {}
    },
    {
        "label": "Redis",
        "kind": 6,
        "importPath": "app.services.redis",
        "description": "app.services.redis",
        "peekOfCode": "class Redis:\n    connection = redis.Redis(\n        host='localhost', port=6379, charset=\"utf-8\", db=0)\n    @staticmethod\n    def query() -> redis.Redis:\n        return Redis.connection\n    def get(self, key) -> redis.Redis:\n        data = self.query().get(key)\n        if (data != 'null' or data != None):\n            try:",
        "detail": "app.services.redis",
        "documentation": {}
    },
    {
        "label": "telegram_daemon",
        "kind": 2,
        "importPath": "app.services.telethon_sessions",
        "description": "app.services.telethon_sessions",
        "peekOfCode": "def telegram_daemon():\n    def wrapper(func):\n        async def wrapped(obj, **args):\n            client:TelegramClient = await init_and_start()\n            await func(self=obj, client=client, **args)\n            await client.run_until_disconnected()\n        return wrapped\n    return wrapper\n# One iteration\ndef telegram_iteration():",
        "detail": "app.services.telethon_sessions",
        "documentation": {}
    },
    {
        "label": "telegram_iteration",
        "kind": 2,
        "importPath": "app.services.telethon_sessions",
        "description": "app.services.telethon_sessions",
        "peekOfCode": "def telegram_iteration():\n    def wrapper(func):\n        async def wrapped(obj, **args):\n            client:TelegramClient = await init_and_start()\n            await func(self=obj, client=client, **args)\n            await client.disconnect()\n        return wrapped\n    return wrapper\n#client = TelegramClient(None, api_id, api_hash)\n# client.session.set_dc(2, '149.154.167.40', 80)",
        "detail": "app.services.telethon_sessions",
        "documentation": {}
    },
    {
        "label": "#client",
        "kind": 5,
        "importPath": "app.services.telethon_sessions",
        "description": "app.services.telethon_sessions",
        "peekOfCode": "#client = TelegramClient(None, api_id, api_hash)\n# client.session.set_dc(2, '149.154.167.40', 80)\n# client.start(\n#     phone='9996621234', code_callback=lambda: '22222'\n# )\n# https://docs.telethon.dev/en/stable/developing/test-servers.html",
        "detail": "app.services.telethon_sessions",
        "documentation": {}
    },
    {
        "label": "Translator",
        "kind": 6,
        "importPath": "app.services.translater",
        "description": "app.services.translater",
        "peekOfCode": "class Translator:\n    locale = 'en'  # В конструкторе не видны конфиги .env\n    @staticmethod\n    async def set_locale(locale: str):\n        if Translator.check_exists_locale(locale):\n            Translator.locale = locale\n    @staticmethod\n    def get_locale_path(locale: str):\n        return os.path.dirname(sys.modules['__main__'].__file__) + '/../../messages/'+locale\n    @staticmethod",
        "detail": "app.services.translater",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 2,
        "importPath": "app.services.translater",
        "description": "app.services.translater",
        "peekOfCode": "def t(key, locale=None, with_file_name=False, variables:dict|None = None):\n    return Translator().translate(key, locale, with_file_name, variables)",
        "detail": "app.services.translater",
        "documentation": {}
    },
    {
        "label": "test_example",
        "kind": 2,
        "importPath": "tests.unit.test_example",
        "description": "tests.unit.test_example",
        "peekOfCode": "def test_example() -> None:\n    assert True",
        "detail": "tests.unit.test_example",
        "documentation": {}
    },
    {
        "label": "sendReponseToTG",
        "kind": 2,
        "importPath": "hw",
        "description": "hw",
        "peekOfCode": "def sendReponseToTG(args, func, message: Message):\n    message.answer(func())\n@sendReponseToTG()\ndef actionSetChat(message: Message):\n    return 'Hello world'",
        "detail": "hw",
        "documentation": {}
    },
    {
        "label": "actionSetChat",
        "kind": 2,
        "importPath": "hw",
        "description": "hw",
        "peekOfCode": "def actionSetChat(message: Message):\n    return 'Hello world'",
        "detail": "hw",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main() -> None:\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"app.config.settings\")\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]